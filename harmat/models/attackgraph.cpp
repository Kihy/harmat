/* Generated by Cython 0.25.2 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__harmat__models__attackgraph
#define __PYX_HAVE_API__harmat__models__attackgraph
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <unordered_map>
#include <unordered_set>
#include <stdint.h>
#include <memory>
#include "bglgraph.h"
#include <algorithm>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "harmat/models/attackgraph.pyx",
  "harmat/graph.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_6harmat_5graph_HarmatGraph;
struct __pyx_obj_6harmat_5graph_Node;
struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph;
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct____get__;
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr;
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact;
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr;
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack;
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr;
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length;
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr;
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length;
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr;
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length;
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr;
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success;
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr;
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns;
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr;
struct __pyx_t_6harmat_5graph_NodeProperty;

/* "graph.pxd":6
 * from bglgraph cimport Graph
 * 
 * cdef struct NodeProperty:             # <<<<<<<<<<<<<<
 *     double risk
 *     double cost
 */
struct __pyx_t_6harmat_5graph_NodeProperty {
  double risk;
  double cost;
  double impact;
  double probability;
  double asset_value;
  bool ignorable;
};

/* "graph.pxd":14
 *     bool ignorable
 * 
 * ctypedef NodeProperty* Nptr             # <<<<<<<<<<<<<<
 * 
 * cdef class HarmatGraph:
 */
typedef struct __pyx_t_6harmat_5graph_NodeProperty *__pyx_t_6harmat_5graph_Nptr;

/* "harmat/models/attackgraph.pyx":408
 * import time
 * 
 * ctypedef vector[Nptr].iterator vit             # <<<<<<<<<<<<<<
 * 
 * @cython.wraparound(False)
 */
typedef std::vector<__pyx_t_6harmat_5graph_Nptr> ::iterator __pyx_t_6harmat_6models_11attackgraph_vit;

/* "graph.pxd":16
 * ctypedef NodeProperty* Nptr
 * 
 * cdef class HarmatGraph:             # <<<<<<<<<<<<<<
 *     cdef unique_ptr[Graph[NodeProperty]] graph_ptr
 *     cdef object np_to_py
 */
struct __pyx_obj_6harmat_5graph_HarmatGraph {
  PyObject_HEAD
  struct __pyx_vtabstruct_6harmat_5graph_HarmatGraph *__pyx_vtab;
  std::unique_ptr<harmat::Graph<struct __pyx_t_6harmat_5graph_NodeProperty> >  graph_ptr;
  PyObject *np_to_py;
};


/* "graph.pxd":44
 * 
 * 
 * cdef class Node:             # <<<<<<<<<<<<<<
 *     cdef NodeProperty* np;
 */
struct __pyx_obj_6harmat_5graph_Node {
  PyObject_HEAD
  struct __pyx_t_6harmat_5graph_NodeProperty *np;
};


/* "harmat/models/attackgraph.pyx":26
 * 
 * 
 * cdef class AttackGraph(HarmatGraph):             # <<<<<<<<<<<<<<
 *     """
 *     Attack Graph class.
 */
struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph {
  struct __pyx_obj_6harmat_5graph_HarmatGraph __pyx_base;
  std::vector<std::vector<__pyx_t_6harmat_5graph_Nptr> >  cy_all_paths;
  struct __pyx_obj_6harmat_5graph_Node *source;
  struct __pyx_obj_6harmat_5graph_Node *target;
  PyObject *values;
};


/* "harmat/models/attackgraph.pyx":78
 * 
 *     @property
 *     def impact(self):             # <<<<<<<<<<<<<<
 *         if self.all_paths is None:
 *             self.find_paths()
 */
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct____get__ {
  PyObject_HEAD
  struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self;
};


/* "harmat/models/attackgraph.pyx":81
 *         if self.all_paths is None:
 *             self.find_paths()
 *         return max(self.path_impact(path) for path in self.all_paths)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct____get__ *__pyx_outer_scope;
  PyObject *__pyx_v_path;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "harmat/models/attackgraph.pyx":84
 * 
 *     @staticmethod
 *     def path_impact(path):             # <<<<<<<<<<<<<<
 *         return sum(node.impact for node in path[1:])
 * 
 */
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact {
  PyObject_HEAD
  PyObject *__pyx_v_path;
};


/* "harmat/models/attackgraph.pyx":85
 *     @staticmethod
 *     def path_impact(path):
 *         return sum(node.impact for node in path[1:])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact *__pyx_outer_scope;
  PyObject *__pyx_v_node;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "harmat/models/attackgraph.pyx":213
 *         return path_cost_sum
 * 
 *     def return_on_attack(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the return on an attack.
 */
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack {
  PyObject_HEAD
  struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self;
};


/* "harmat/models/attackgraph.pyx":225
 *         """
 *         self.check_attack_paths()
 *         return max(self.path_return(path) for path in self.all_paths)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack *__pyx_outer_scope;
  PyObject *__pyx_v_path;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "harmat/models/attackgraph.pyx":239
 *         return path_return
 * 
 *     def mean_path_length(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the Mean of Path Metric
 */
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length {
  PyObject_HEAD
  struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self;
};


/* "harmat/models/attackgraph.pyx":249
 *         """
 *         self.check_attack_paths()
 *         path_len_generator = (len(path) - 1 for path in self.all_paths)             # <<<<<<<<<<<<<<
 *         return statistics.mean(path_len_generator)
 * 
 */
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length *__pyx_outer_scope;
  PyObject *__pyx_v_path;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "harmat/models/attackgraph.pyx":252
 *         return statistics.mean(path_len_generator)
 * 
 *     def mode_path_length(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the Mode of Path Length Metric
 */
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length {
  PyObject_HEAD
  struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self;
};


/* "harmat/models/attackgraph.pyx":257
 *         """
 *         self.check_attack_paths()
 *         return max(len(path) for path in self.all_paths) - 1             # <<<<<<<<<<<<<<
 * 
 *     def stdev_path_length(self):
 */
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length *__pyx_outer_scope;
  PyObject *__pyx_v_path;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "harmat/models/attackgraph.pyx":259
 *         return max(len(path) for path in self.all_paths) - 1
 * 
 *     def stdev_path_length(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the standard deviation of path length
 */
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length {
  PyObject_HEAD
  struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self;
};


/* "harmat/models/attackgraph.pyx":264
 *         """
 *         self.check_attack_paths()
 *         path_len_generator = (len(path) - 1 for path in self.all_paths)             # <<<<<<<<<<<<<<
 *         try:
 *             return statistics.stdev(path_len_generator)
 */
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length *__pyx_outer_scope;
  PyObject *__pyx_v_path;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "harmat/models/attackgraph.pyx":352
 *         return self.mean_path_length() / num_paths
 * 
 *     def probability_attack_success(self):             # <<<<<<<<<<<<<<
 *         self.check_attack_paths()
 *         return max(self.path_probability(path[1:]) for path in self.all_paths)
 */
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success {
  PyObject_HEAD
  struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self;
};


/* "harmat/models/attackgraph.pyx":354
 *     def probability_attack_success(self):
 *         self.check_attack_paths()
 *         return max(self.path_probability(path[1:]) for path in self.all_paths)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success *__pyx_outer_scope;
  PyObject *__pyx_v_path;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "harmat/models/attackgraph.pyx":367
 *         return p
 * 
 *     def all_vulns(self):             # <<<<<<<<<<<<<<
 *         """
 *         :return: A set of all (unique) vulnerabilities
 */
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns {
  PyObject_HEAD
  struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self;
};


/* "harmat/models/attackgraph.pyx":371
 *         :return: A set of all (unique) vulnerabilities
 *         """
 *         return {vul for vul in (node.lower_layer.all_vulns() for node in self.nodes())}             # <<<<<<<<<<<<<<
 * 
 *     def hosts(self):
 */
struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns *__pyx_outer_scope;
  PyObject *__pyx_v_node;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};



/* "graph.pxd":16
 * ctypedef NodeProperty* Nptr
 * 
 * cdef class HarmatGraph:             # <<<<<<<<<<<<<<
 *     cdef unique_ptr[Graph[NodeProperty]] graph_ptr
 *     cdef object np_to_py
 */

struct __pyx_vtabstruct_6harmat_5graph_HarmatGraph {
  PyObject *(*add_node)(struct __pyx_obj_6harmat_5graph_HarmatGraph *, struct __pyx_obj_6harmat_5graph_Node *, int __pyx_skip_dispatch);
  PyObject *(*add_edge)(struct __pyx_obj_6harmat_5graph_HarmatGraph *, struct __pyx_obj_6harmat_5graph_Node *, struct __pyx_obj_6harmat_5graph_Node *, int __pyx_skip_dispatch);
  PyObject *(*remove_node)(struct __pyx_obj_6harmat_5graph_HarmatGraph *, struct __pyx_obj_6harmat_5graph_Node *, int __pyx_skip_dispatch);
  PyObject *(*has_successor)(struct __pyx_obj_6harmat_5graph_HarmatGraph *, struct __pyx_obj_6harmat_5graph_Node *, struct __pyx_obj_6harmat_5graph_Node *, int __pyx_skip_dispatch);
  PyObject *(*has_predecessor)(struct __pyx_obj_6harmat_5graph_HarmatGraph *, struct __pyx_obj_6harmat_5graph_Node *, struct __pyx_obj_6harmat_5graph_Node *, int __pyx_skip_dispatch);
  PyObject *(*successors)(struct __pyx_obj_6harmat_5graph_HarmatGraph *, struct __pyx_obj_6harmat_5graph_Node *, int __pyx_skip_dispatch);
  PyObject *(*predecessors)(struct __pyx_obj_6harmat_5graph_HarmatGraph *, struct __pyx_obj_6harmat_5graph_Node *, int __pyx_skip_dispatch);
  PyObject *(*neighbors)(struct __pyx_obj_6harmat_5graph_HarmatGraph *, struct __pyx_obj_6harmat_5graph_Node *, int __pyx_skip_dispatch);
  bool (*is_directed)(struct __pyx_obj_6harmat_5graph_HarmatGraph *, int __pyx_skip_dispatch);
  unsigned int (*number_of_edges)(struct __pyx_obj_6harmat_5graph_HarmatGraph *, int __pyx_skip_dispatch);
  unsigned int (*number_of_nodes)(struct __pyx_obj_6harmat_5graph_HarmatGraph *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6harmat_5graph_HarmatGraph *__pyx_vtabptr_6harmat_5graph_HarmatGraph;


/* "harmat/models/attackgraph.pyx":26
 * 
 * 
 * cdef class AttackGraph(HarmatGraph):             # <<<<<<<<<<<<<<
 *     """
 *     Attack Graph class.
 */

struct __pyx_vtabstruct_6harmat_6models_11attackgraph_AttackGraph {
  struct __pyx_vtabstruct_6harmat_5graph_HarmatGraph __pyx_base;
  PyObject *(*path_risk)(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *, std::vector<struct __pyx_t_6harmat_5graph_NodeProperty *> );
  PyObject *(*path_cost)(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *, std::vector<struct __pyx_t_6harmat_5graph_NodeProperty *> );
};
static struct __pyx_vtabstruct_6harmat_6models_11attackgraph_AttackGraph *__pyx_vtabptr_6harmat_6models_11attackgraph_AttackGraph;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* IncludeStringH.proto */
#include <string.h>

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* GetNameInClass.proto */
static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

struct __pyx_t_6harmat_5graph_NodeProperty;
static PyObject* __pyx_convert__to_py_struct____pyx_t_6harmat_5graph_NodeProperty(struct __pyx_t_6harmat_5graph_NodeProperty s);
/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static int __Pyx_Coroutine_clear(PyObject *self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_6harmat_6models_11attackgraph_11AttackGraph_path_risk(CYTHON_UNUSED struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self, std::vector<struct __pyx_t_6harmat_5graph_NodeProperty *>  __pyx_v_path); /* proto*/
static PyObject *__pyx_f_6harmat_6models_11attackgraph_11AttackGraph_path_cost(CYTHON_UNUSED struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self, std::vector<struct __pyx_t_6harmat_5graph_NodeProperty *>  __pyx_v_path); /* proto*/

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.unordered_map' */

/* Module declarations from 'libcpp.unordered_set' */

/* Module declarations from 'libcpp.cast' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'harmat.bglgraph' */

/* Module declarations from 'harmat.graph' */
static PyTypeObject *__pyx_ptype_6harmat_5graph_HarmatGraph = 0;
static PyTypeObject *__pyx_ptype_6harmat_5graph_Node = 0;

/* Module declarations from 'harmat.extras' */

/* Module declarations from 'cython' */

/* Module declarations from 'harmat.models.attackgraph' */
static PyTypeObject *__pyx_ptype_6harmat_6models_11attackgraph_AttackGraph = 0;
static PyTypeObject *__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct____get__ = 0;
static PyTypeObject *__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact = 0;
static PyTypeObject *__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr = 0;
static PyTypeObject *__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack = 0;
static PyTypeObject *__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr = 0;
static PyTypeObject *__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length = 0;
static PyTypeObject *__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr = 0;
static PyTypeObject *__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length = 0;
static PyTypeObject *__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr = 0;
static PyTypeObject *__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length = 0;
static PyTypeObject *__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr = 0;
static PyTypeObject *__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success = 0;
static PyTypeObject *__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr = 0;
static PyTypeObject *__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns = 0;
static PyTypeObject *__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr = 0;
static int __pyx_f_6harmat_6models_11attackgraph_is_vulnerable(struct __pyx_t_6harmat_5graph_NodeProperty *); /*proto*/
static std::vector<std::vector<__pyx_t_6harmat_5graph_Nptr> >  __pyx_f_6harmat_6models_11attackgraph_find_attack_paths(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *, struct __pyx_t_6harmat_5graph_NodeProperty *, std::vector<__pyx_t_6harmat_5graph_Nptr> ); /*proto*/
static std::vector<std::vector<__pyx_t_6harmat_5graph_Nptr> >  __pyx_f_6harmat_6models_11attackgraph_all_simple_attack_paths(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *, struct __pyx_t_6harmat_5graph_NodeProperty *, struct __pyx_t_6harmat_5graph_NodeProperty *); /*proto*/
#define __Pyx_MODULE_NAME "harmat.models.attackgraph"
int __pyx_module_is_main_harmat__models__attackgraph = 0;

/* Implementation of 'harmat.models.attackgraph' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_ZeroDivisionError;
static PyObject *__pyx_builtin_filter;
static const char __pyx_k_p[] = "p";
static const char __pyx_k_hm[] = "hm";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_Node[] = "Node";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_cost[] = "cost";
static const char __pyx_k_host[] = "host";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mean[] = "mean";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_node[] = "node";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_prob[] = "prob";
static const char __pyx_k_risk[] = "risk";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_hosts[] = "hosts";
static const char __pyx_k_node1[] = "node1";
static const char __pyx_k_nodes[] = "nodes";
static const char __pyx_k_stdev[] = "stdev";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_filter[] = "filter";
static const char __pyx_k_flowup[] = "flowup";
static const char __pyx_k_harmat[] = "harmat";
static const char __pyx_k_impact[] = "impact";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "name";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_Attacker[] = "Attacker";
static const char __pyx_k_networkx[] = "networkx";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_two_ways[] = "two_ways";
static const char __pyx_k_all_paths[] = "all_paths";
static const char __pyx_k_all_vulns[] = "all_vulns";
static const char __pyx_k_ignorable[] = "ignorable";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_centrality[] = "centrality";
static const char __pyx_k_find_paths[] = "find_paths";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_statistics[] = "statistics";
static const char __pyx_k_OrderedDict[] = "OrderedDict";
static const char __pyx_k_asset_value[] = "asset_value";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_lower_layer[] = "lower_layer";
static const char __pyx_k_path_impact[] = "path_impact";
static const char __pyx_k_path_return[] = "path_return";
static const char __pyx_k_probability[] = "probability";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_shortest_path[] = "shortest_path";
static const char __pyx_k_No_attack_paths[] = "No attack paths";
static const char __pyx_k_mean_path_length[] = "mean_path_length";
static const char __pyx_k_path_probability[] = "path_probability";
static const char __pyx_k_Source_is_not_set[] = "Source is not set";
static const char __pyx_k_ZeroDivisionError[] = "ZeroDivisionError";
static const char __pyx_k_degree_centrality[] = "degree_centrality";
static const char __pyx_k_filter_ignorables[] = "filter_ignorables";
static const char __pyx_k_NoAttackPathExists[] = "NoAttackPathExists";
static const char __pyx_k_check_attack_paths[] = "check_attack_paths";
static const char __pyx_k_hosts_locals_lambda[] = "hosts.<locals>.<lambda>";
static const char __pyx_k_closeness_centrality[] = "closeness_centrality";
static const char __pyx_k_betweenness_centrality[] = "betweenness_centrality";
static const char __pyx_k_number_of_attack_paths[] = "number_of_attack_paths";
static const char __pyx_k_HarmNotFullyDefinedError[] = "HarmNotFullyDefinedError";
static const char __pyx_k_all_vulns_locals_genexpr[] = "all_vulns.<locals>.genexpr";
static const char __pyx_k_harmat_models_attackgraph[] = "harmat.models.attackgraph";
static const char __pyx_k_path_impact_locals_genexpr[] = "path_impact.<locals>.genexpr";
static const char __pyx_k_Users_hjkim_Desktop_misc_safeli[] = "/Users/hjkim/Desktop/misc/safelite_test/harmat/harmat/models/attackgraph.pyx";
static const char __pyx_k_Zero_cost_host_is_not_permitted[] = "Zero cost host is not permitted";
static const char __pyx_k_mean_path_length_locals_genexpr[] = "mean_path_length.<locals>.genexpr";
static const char __pyx_k_mode_path_length_locals_genexpr[] = "mode_path_length.<locals>.genexpr";
static const char __pyx_k_return_on_attack_locals_genexpr[] = "return_on_attack.<locals>.genexpr";
static const char __pyx_k_AttackGraph___get___locals_genex[] = "AttackGraph.__get__.<locals>.genexpr";
static const char __pyx_k_Attack_paths_have_not_been_calcu[] = "Attack paths have not been calculated";
static const char __pyx_k_probability_attack_success_local[] = "probability_attack_success.<locals>.genexpr";
static const char __pyx_k_stdev_path_length_locals_genexpr[] = "stdev_path_length.<locals>.genexpr";
static PyObject *__pyx_n_s_AttackGraph___get___locals_genex;
static PyObject *__pyx_kp_s_Attack_paths_have_not_been_calcu;
static PyObject *__pyx_n_s_Attacker;
static PyObject *__pyx_n_s_HarmNotFullyDefinedError;
static PyObject *__pyx_n_s_NoAttackPathExists;
static PyObject *__pyx_kp_s_No_attack_paths;
static PyObject *__pyx_n_s_Node;
static PyObject *__pyx_n_s_OrderedDict;
static PyObject *__pyx_kp_s_Source_is_not_set;
static PyObject *__pyx_kp_s_Users_hjkim_Desktop_misc_safeli;
static PyObject *__pyx_n_s_ZeroDivisionError;
static PyObject *__pyx_kp_s_Zero_cost_host_is_not_permitted;
static PyObject *__pyx_n_s_all_paths;
static PyObject *__pyx_n_s_all_vulns;
static PyObject *__pyx_n_s_all_vulns_locals_genexpr;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_asset_value;
static PyObject *__pyx_n_s_betweenness_centrality;
static PyObject *__pyx_n_s_centrality;
static PyObject *__pyx_n_s_check_attack_paths;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_closeness_centrality;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_cost;
static PyObject *__pyx_n_s_degree_centrality;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_filter;
static PyObject *__pyx_n_s_filter_ignorables;
static PyObject *__pyx_n_s_find_paths;
static PyObject *__pyx_n_s_flowup;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_harmat;
static PyObject *__pyx_n_s_harmat_models_attackgraph;
static PyObject *__pyx_n_s_hm;
static PyObject *__pyx_n_s_host;
static PyObject *__pyx_n_s_hosts;
static PyObject *__pyx_n_s_hosts_locals_lambda;
static PyObject *__pyx_n_s_ignorable;
static PyObject *__pyx_n_s_impact;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_lower_layer;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_mean;
static PyObject *__pyx_n_s_mean_path_length;
static PyObject *__pyx_n_s_mean_path_length_locals_genexpr;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_mode_path_length_locals_genexpr;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_networkx;
static PyObject *__pyx_n_s_node;
static PyObject *__pyx_n_s_node1;
static PyObject *__pyx_n_s_nodes;
static PyObject *__pyx_n_s_number_of_attack_paths;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_path_impact;
static PyObject *__pyx_n_s_path_impact_locals_genexpr;
static PyObject *__pyx_n_s_path_probability;
static PyObject *__pyx_n_s_path_return;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_prob;
static PyObject *__pyx_n_s_probability;
static PyObject *__pyx_n_s_probability_attack_success_local;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_return_on_attack_locals_genexpr;
static PyObject *__pyx_n_s_risk;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_shortest_path;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_statistics;
static PyObject *__pyx_n_s_stdev;
static PyObject *__pyx_n_s_stdev_path_length_locals_genexpr;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_two_ways;
static int __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph___cinit__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static int __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_2__init__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_4__repr__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6find_paths(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_8flowup(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6impact_7__get___genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6impact___get__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_11path_impact_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_10path_impact(PyObject *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_9all_paths___get__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_12check_attack_paths(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_4risk___get__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_4cost___get__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_16return_on_attack_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_14return_on_attack(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_16path_return(PyObject *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_16mean_path_length_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_18mean_path_length(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_16mode_path_length_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_20mode_path_length(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_17stdev_path_length_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_22stdev_path_length(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_24shortest_path_length(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_26add_edge_between(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self, PyObject *__pyx_v_node1, PyObject *__pyx_v_nodes, PyObject *__pyx_v_two_ways); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_28find_node(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self, PyObject *__pyx_v_node_name); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_22betweenness_centrality___get__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_20closeness_centrality___get__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_17degree_centrality___get__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_30initialise_centrality_measure(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_32number_of_attack_paths(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_34normalised_mean_path_length(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_26probability_attack_success_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_36probability_attack_success(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_38path_probability(PyObject *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_9all_vulns_8genexpr7_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_40all_vulns(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_42hosts(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_44num_vulnerable_hosts(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6source___get__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static int __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6source_2__set__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6source_4__del__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6target___get__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static int __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6target_2__set__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6target_4__del__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6values___get__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static int __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6values_2__set__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6values_4__del__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6harmat_6models_11attackgraph_filter_ignorables(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_path); /* proto */
static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph_AttackGraph(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct____get__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_3;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_slice__2;
static PyObject *__pyx_slice__3;
static PyObject *__pyx_slice__7;
static PyObject *__pyx_slice__8;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_codeobj__10;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__16;

/* "harmat/models/attackgraph.pyx":39
 *     cdef public object values
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.cy_all_paths = vector[vector[Nptr]]()
 *         self.source = None
 */

/* Python wrapper */
static int __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph___cinit__(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph___cinit__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<__pyx_t_6harmat_5graph_Nptr> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "harmat/models/attackgraph.pyx":40
 * 
 *     def __cinit__(self):
 *         self.cy_all_paths = vector[vector[Nptr]]()             # <<<<<<<<<<<<<<
 *         self.source = None
 *         self.target = None
 */
  try {
    __pyx_t_1 = std::vector<std::vector<__pyx_t_6harmat_5graph_Nptr> > ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 40, __pyx_L1_error)
  }
  __pyx_v_self->cy_all_paths = __pyx_t_1;

  /* "harmat/models/attackgraph.pyx":41
 *     def __cinit__(self):
 *         self.cy_all_paths = vector[vector[Nptr]]()
 *         self.source = None             # <<<<<<<<<<<<<<
 *         self.target = None
 *         self.values = OrderedDict()
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->source);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->source));
  __pyx_v_self->source = ((struct __pyx_obj_6harmat_5graph_Node *)Py_None);

  /* "harmat/models/attackgraph.pyx":42
 *         self.cy_all_paths = vector[vector[Nptr]]()
 *         self.source = None
 *         self.target = None             # <<<<<<<<<<<<<<
 *         self.values = OrderedDict()
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->target);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->target));
  __pyx_v_self->target = ((struct __pyx_obj_6harmat_5graph_Node *)Py_None);

  /* "harmat/models/attackgraph.pyx":43
 *         self.source = None
 *         self.target = None
 *         self.values = OrderedDict()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 43, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 43, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->values);
  __Pyx_DECREF(__pyx_v_self->values);
  __pyx_v_self->values = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "harmat/models/attackgraph.pyx":39
 *     cdef public object values
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.cy_all_paths = vector[vector[Nptr]]()
 *         self.source = None
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":45
 *         self.values = OrderedDict()
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         super(AttackGraph, self).__init__()
 * 
 */

/* Python wrapper */
static int __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_2__init__(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_2__init__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "harmat/models/attackgraph.pyx":46
 * 
 *     def __init__(self):
 *         super(AttackGraph, self).__init__()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6harmat_6models_11attackgraph_AttackGraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6harmat_6models_11attackgraph_AttackGraph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6harmat_6models_11attackgraph_AttackGraph));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "harmat/models/attackgraph.pyx":45
 *         self.values = OrderedDict()
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         super(AttackGraph, self).__init__()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":48
 *         super(AttackGraph, self).__init__()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.__class__.__name__
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_5__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_5__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_4__repr__(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_4__repr__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "harmat/models/attackgraph.pyx":49
 * 
 *     def __repr__(self):
 *         return self.__class__.__name__             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":48
 *         super(AttackGraph, self).__init__()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.__class__.__name__
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":52
 * 
 *     @cython.boundscheck(False)
 *     def find_paths(self):             # <<<<<<<<<<<<<<
 *         """
 *         Finds all paths between the source (Attacker) and all other nodes.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_7find_paths(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6harmat_6models_11attackgraph_11AttackGraph_6find_paths[] = "\n        Finds all paths between the source (Attacker) and all other nodes.\n        This function is *very* expensive.\n        If target is specified, it will find all paths between the attacker and the target node\n        :param target: Specified target node\n        ";
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_7find_paths(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_paths (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6find_paths(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6find_paths(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  std::vector<struct __pyx_t_6harmat_5graph_NodeProperty *>  __pyx_v_nodes;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::vector<__pyx_t_6harmat_5graph_Nptr>  __pyx_t_5;
  __Pyx_RefNannySetupContext("find_paths", 0);

  /* "harmat/models/attackgraph.pyx":60
 *         """
 *         cdef vector[NodeProperty*] nodes
 *         if self.source is None:             # <<<<<<<<<<<<<<
 *             raise HarmNotFullyDefinedError('Source is not set')
 *         if self.target is None:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->source) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "harmat/models/attackgraph.pyx":61
 *         cdef vector[NodeProperty*] nodes
 *         if self.source is None:
 *             raise HarmNotFullyDefinedError('Source is not set')             # <<<<<<<<<<<<<<
 *         if self.target is None:
 *             nodes = deref(self.graph_ptr).nodes()
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_HarmNotFullyDefinedError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 61, __pyx_L1_error)

    /* "harmat/models/attackgraph.pyx":60
 *         """
 *         cdef vector[NodeProperty*] nodes
 *         if self.source is None:             # <<<<<<<<<<<<<<
 *             raise HarmNotFullyDefinedError('Source is not set')
 *         if self.target is None:
 */
  }

  /* "harmat/models/attackgraph.pyx":62
 *         if self.source is None:
 *             raise HarmNotFullyDefinedError('Source is not set')
 *         if self.target is None:             # <<<<<<<<<<<<<<
 *             nodes = deref(self.graph_ptr).nodes()
 *             # remove source node from nodes
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_self->target) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "harmat/models/attackgraph.pyx":63
 *             raise HarmNotFullyDefinedError('Source is not set')
 *         if self.target is None:
 *             nodes = deref(self.graph_ptr).nodes()             # <<<<<<<<<<<<<<
 *             # remove source node from nodes
 *             nodes.erase(remove(nodes.begin(), nodes.end(), self.source.np), nodes.end())
 */
    __pyx_v_nodes = (*__pyx_v_self->__pyx_base.graph_ptr).nodes();

    /* "harmat/models/attackgraph.pyx":65
 *             nodes = deref(self.graph_ptr).nodes()
 *             # remove source node from nodes
 *             nodes.erase(remove(nodes.begin(), nodes.end(), self.source.np), nodes.end())             # <<<<<<<<<<<<<<
 *         else:
 *             nodes = vector[Nptr]()
 */
    __pyx_v_nodes.erase(std::remove<std::vector<struct __pyx_t_6harmat_5graph_NodeProperty *> ::iterator,struct __pyx_t_6harmat_5graph_NodeProperty *>(__pyx_v_nodes.begin(), __pyx_v_nodes.end(), __pyx_v_self->source->np), __pyx_v_nodes.end());

    /* "harmat/models/attackgraph.pyx":62
 *         if self.source is None:
 *             raise HarmNotFullyDefinedError('Source is not set')
 *         if self.target is None:             # <<<<<<<<<<<<<<
 *             nodes = deref(self.graph_ptr).nodes()
 *             # remove source node from nodes
 */
    goto __pyx_L4;
  }

  /* "harmat/models/attackgraph.pyx":67
 *             nodes.erase(remove(nodes.begin(), nodes.end(), self.source.np), nodes.end())
 *         else:
 *             nodes = vector[Nptr]()             # <<<<<<<<<<<<<<
 *             nodes.push_back(self.target.np)
 *         self.cy_all_paths = find_attack_paths(self, self.source.np, nodes)
 */
  /*else*/ {
    try {
      __pyx_t_5 = std::vector<__pyx_t_6harmat_5graph_Nptr> ();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 67, __pyx_L1_error)
    }
    __pyx_v_nodes = __pyx_t_5;

    /* "harmat/models/attackgraph.pyx":68
 *         else:
 *             nodes = vector[Nptr]()
 *             nodes.push_back(self.target.np)             # <<<<<<<<<<<<<<
 *         self.cy_all_paths = find_attack_paths(self, self.source.np, nodes)
 * 
 */
    try {
      __pyx_v_nodes.push_back(__pyx_v_self->target->np);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 68, __pyx_L1_error)
    }
  }
  __pyx_L4:;

  /* "harmat/models/attackgraph.pyx":69
 *             nodes = vector[Nptr]()
 *             nodes.push_back(self.target.np)
 *         self.cy_all_paths = find_attack_paths(self, self.source.np, nodes)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->cy_all_paths = __pyx_f_6harmat_6models_11attackgraph_find_attack_paths(__pyx_v_self, __pyx_v_self->source->np, __pyx_v_nodes);

  /* "harmat/models/attackgraph.pyx":52
 * 
 *     @cython.boundscheck(False)
 *     def find_paths(self):             # <<<<<<<<<<<<<<
 *         """
 *         Finds all paths between the source (Attacker) and all other nodes.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.find_paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":72
 * 
 * 
 *     def flowup(self):             # <<<<<<<<<<<<<<
 *         for node in self.hosts():
 *             if node.lower_layer is not None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_9flowup(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_9flowup(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flowup (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_8flowup(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_8flowup(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("flowup", 0);

  /* "harmat/models/attackgraph.pyx":73
 * 
 *     def flowup(self):
 *         for node in self.hosts():             # <<<<<<<<<<<<<<
 *             if node.lower_layer is not None:
 *                 node.flowup()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hosts); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 73, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 73, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 73, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 73, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "harmat/models/attackgraph.pyx":74
 *     def flowup(self):
 *         for node in self.hosts():
 *             if node.lower_layer is not None:             # <<<<<<<<<<<<<<
 *                 node.flowup()
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_lower_layer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = (__pyx_t_1 != Py_None);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {

      /* "harmat/models/attackgraph.pyx":75
 *         for node in self.hosts():
 *             if node.lower_layer is not None:
 *                 node.flowup()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_flowup); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 75, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_8) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "harmat/models/attackgraph.pyx":74
 *     def flowup(self):
 *         for node in self.hosts():
 *             if node.lower_layer is not None:             # <<<<<<<<<<<<<<
 *                 node.flowup()
 * 
 */
    }

    /* "harmat/models/attackgraph.pyx":73
 * 
 *     def flowup(self):
 *         for node in self.hosts():             # <<<<<<<<<<<<<<
 *             if node.lower_layer is not None:
 *                 node.flowup()
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "harmat/models/attackgraph.pyx":72
 * 
 * 
 *     def flowup(self):             # <<<<<<<<<<<<<<
 *         for node in self.hosts():
 *             if node.lower_layer is not None:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.flowup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":78
 * 
 *     @property
 *     def impact(self):             # <<<<<<<<<<<<<<
 *         if self.all_paths is None:
 *             self.find_paths()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6impact_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6impact_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6impact___get__(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_6impact_7__get___2generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "harmat/models/attackgraph.pyx":81
 *         if self.all_paths is None:
 *             self.find_paths()
 *         return max(self.path_impact(path) for path in self.all_paths)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6impact_7__get___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr *)__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr(__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 81, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct____get__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_6impact_7__get___2generator, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_AttackGraph___get___locals_genex, __pyx_n_s_harmat_models_attackgraph); if (unlikely(!gen)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.impact.__get__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_6impact_7__get___2generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 81, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 81, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self), __pyx_n_s_all_paths); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 81, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 81, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 81, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 81, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_path);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_path, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 81, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self), __pyx_n_s_path_impact); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_cur_scope->__pyx_v_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_path};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_path};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 81, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_path);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_path);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_cur_scope->__pyx_v_path);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 81, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":78
 * 
 *     @property
 *     def impact(self):             # <<<<<<<<<<<<<<
 *         if self.all_paths is None:
 *             self.find_paths()
 */

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6impact___get__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct____get__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __pyx_cur_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct____get__ *)__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct____get__(__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct____get__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct____get__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 78, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "harmat/models/attackgraph.pyx":79
 *     @property
 *     def impact(self):
 *         if self.all_paths is None:             # <<<<<<<<<<<<<<
 *             self.find_paths()
 *         return max(self.path_impact(path) for path in self.all_paths)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_all_paths); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "harmat/models/attackgraph.pyx":80
 *     def impact(self):
 *         if self.all_paths is None:
 *             self.find_paths()             # <<<<<<<<<<<<<<
 *         return max(self.path_impact(path) for path in self.all_paths)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_find_paths); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "harmat/models/attackgraph.pyx":79
 *     @property
 *     def impact(self):
 *         if self.all_paths is None:             # <<<<<<<<<<<<<<
 *             self.find_paths()
 *         return max(self.path_impact(path) for path in self.all_paths)
 */
  }

  /* "harmat/models/attackgraph.pyx":81
 *         if self.all_paths is None:
 *             self.find_paths()
 *         return max(self.path_impact(path) for path in self.all_paths)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6impact_7__get___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_max, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":78
 * 
 *     @property
 *     def impact(self):             # <<<<<<<<<<<<<<
 *         if self.all_paths is None:
 *             self.find_paths()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.impact.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":84
 * 
 *     @staticmethod
 *     def path_impact(path):             # <<<<<<<<<<<<<<
 *         return sum(node.impact for node in path[1:])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_11path_impact(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6harmat_6models_11attackgraph_11AttackGraph_11path_impact = {"path_impact", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_11path_impact, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_11path_impact(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_path = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("path_impact (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_path,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "path_impact") < 0)) __PYX_ERR(0, 84, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_path = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("path_impact", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 84, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.path_impact", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_10path_impact(__pyx_v_path);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_11path_impact_2generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "harmat/models/attackgraph.pyx":85
 *     @staticmethod
 *     def path_impact(path):
 *         return sum(node.impact for node in path[1:])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_11path_impact_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr *)__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr(__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 85, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_11path_impact_2generator1, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_path_impact_locals_genexpr, __pyx_n_s_harmat_models_attackgraph); if (unlikely(!gen)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.path_impact.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_11path_impact_2generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 85, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_path)) { __Pyx_RaiseClosureNameError("path"); __PYX_ERR(0, 85, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_path, 1, 0, NULL, NULL, &__pyx_slice__2, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 85, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 85, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 85, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 85, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_node);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_node, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_node, __pyx_n_s_impact); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 85, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":84
 * 
 *     @staticmethod
 *     def path_impact(path):             # <<<<<<<<<<<<<<
 *         return sum(node.impact for node in path[1:])
 * 
 */

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_10path_impact(PyObject *__pyx_v_path) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("path_impact", 0);
  __pyx_cur_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact *)__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact(__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 84, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_path = __pyx_v_path;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_path);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_path);

  /* "harmat/models/attackgraph.pyx":85
 *     @staticmethod
 *     def path_impact(path):
 *         return sum(node.impact for node in path[1:])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_11path_impact_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":84
 * 
 *     @staticmethod
 *     def path_impact(path):             # <<<<<<<<<<<<<<
 *         return sum(node.impact for node in path[1:])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.path_impact", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":88
 * 
 *     @property
 *     def all_paths(self):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[Nptr]].iterator path_it = self.cy_all_paths.begin()
 *         cdef vector[Nptr].iterator it
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_9all_paths_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_9all_paths_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_9all_paths___get__(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_9all_paths___get__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  std::vector<std::vector<__pyx_t_6harmat_5graph_Nptr> > ::iterator __pyx_v_path_it;
  std::vector<__pyx_t_6harmat_5graph_Nptr> ::iterator __pyx_v_it;
  PyObject *__pyx_v_paths = NULL;
  PyObject *__pyx_v_path = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "harmat/models/attackgraph.pyx":89
 *     @property
 *     def all_paths(self):
 *         cdef vector[vector[Nptr]].iterator path_it = self.cy_all_paths.begin()             # <<<<<<<<<<<<<<
 *         cdef vector[Nptr].iterator it
 *         paths = []
 */
  __pyx_v_path_it = __pyx_v_self->cy_all_paths.begin();

  /* "harmat/models/attackgraph.pyx":91
 *         cdef vector[vector[Nptr]].iterator path_it = self.cy_all_paths.begin()
 *         cdef vector[Nptr].iterator it
 *         paths = []             # <<<<<<<<<<<<<<
 *         while path_it != self.cy_all_paths.end():
 *             it = deref(path_it).begin()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_paths = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "harmat/models/attackgraph.pyx":92
 *         cdef vector[Nptr].iterator it
 *         paths = []
 *         while path_it != self.cy_all_paths.end():             # <<<<<<<<<<<<<<
 *             it = deref(path_it).begin()
 *             path = []
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_path_it != __pyx_v_self->cy_all_paths.end()) != 0);
    if (!__pyx_t_2) break;

    /* "harmat/models/attackgraph.pyx":93
 *         paths = []
 *         while path_it != self.cy_all_paths.end():
 *             it = deref(path_it).begin()             # <<<<<<<<<<<<<<
 *             path = []
 *             while it != deref(path_it).end():
 */
    __pyx_v_it = (*__pyx_v_path_it).begin();

    /* "harmat/models/attackgraph.pyx":94
 *         while path_it != self.cy_all_paths.end():
 *             it = deref(path_it).begin()
 *             path = []             # <<<<<<<<<<<<<<
 *             while it != deref(path_it).end():
 *                 path.append(deref(deref(it)))
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_path, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "harmat/models/attackgraph.pyx":95
 *             it = deref(path_it).begin()
 *             path = []
 *             while it != deref(path_it).end():             # <<<<<<<<<<<<<<
 *                 path.append(deref(deref(it)))
 *                 inc(it)
 */
    while (1) {
      __pyx_t_2 = ((__pyx_v_it != (*__pyx_v_path_it).end()) != 0);
      if (!__pyx_t_2) break;

      /* "harmat/models/attackgraph.pyx":96
 *             path = []
 *             while it != deref(path_it).end():
 *                 path.append(deref(deref(it)))             # <<<<<<<<<<<<<<
 *                 inc(it)
 *             paths.append(path)
 */
      __pyx_t_1 = __pyx_convert__to_py_struct____pyx_t_6harmat_5graph_NodeProperty((*(*__pyx_v_it))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_path, __pyx_t_1); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 96, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "harmat/models/attackgraph.pyx":97
 *             while it != deref(path_it).end():
 *                 path.append(deref(deref(it)))
 *                 inc(it)             # <<<<<<<<<<<<<<
 *             paths.append(path)
 *             inc(path_it)
 */
      (++__pyx_v_it);
    }

    /* "harmat/models/attackgraph.pyx":98
 *                 path.append(deref(deref(it)))
 *                 inc(it)
 *             paths.append(path)             # <<<<<<<<<<<<<<
 *             inc(path_it)
 *         return paths
 */
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_paths, __pyx_v_path); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 98, __pyx_L1_error)

    /* "harmat/models/attackgraph.pyx":99
 *                 inc(it)
 *             paths.append(path)
 *             inc(path_it)             # <<<<<<<<<<<<<<
 *         return paths
 * 
 */
    (++__pyx_v_path_it);
  }

  /* "harmat/models/attackgraph.pyx":100
 *             paths.append(path)
 *             inc(path_it)
 *         return paths             # <<<<<<<<<<<<<<
 * 
 *     def check_attack_paths(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_paths);
  __pyx_r = __pyx_v_paths;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":88
 * 
 *     @property
 *     def all_paths(self):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[Nptr]].iterator path_it = self.cy_all_paths.begin()
 *         cdef vector[Nptr].iterator it
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.all_paths.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_paths);
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":102
 *         return paths
 * 
 *     def check_attack_paths(self):             # <<<<<<<<<<<<<<
 *         if self.cy_all_paths.empty():
 *             self.find_paths()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_13check_attack_paths(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_13check_attack_paths(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_attack_paths (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_12check_attack_paths(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_12check_attack_paths(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("check_attack_paths", 0);

  /* "harmat/models/attackgraph.pyx":103
 * 
 *     def check_attack_paths(self):
 *         if self.cy_all_paths.empty():             # <<<<<<<<<<<<<<
 *             self.find_paths()
 *             if self.cy_all_paths.empty():
 */
  __pyx_t_1 = (__pyx_v_self->cy_all_paths.empty() != 0);
  if (__pyx_t_1) {

    /* "harmat/models/attackgraph.pyx":104
 *     def check_attack_paths(self):
 *         if self.cy_all_paths.empty():
 *             self.find_paths()             # <<<<<<<<<<<<<<
 *             if self.cy_all_paths.empty():
 *                 raise NoAttackPathExists()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_find_paths); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "harmat/models/attackgraph.pyx":105
 *         if self.cy_all_paths.empty():
 *             self.find_paths()
 *             if self.cy_all_paths.empty():             # <<<<<<<<<<<<<<
 *                 raise NoAttackPathExists()
 * 
 */
    __pyx_t_1 = (__pyx_v_self->cy_all_paths.empty() != 0);
    if (__pyx_t_1) {

      /* "harmat/models/attackgraph.pyx":106
 *             self.find_paths()
 *             if self.cy_all_paths.empty():
 *                 raise NoAttackPathExists()             # <<<<<<<<<<<<<<
 * 
 *     @cython.wraparound(False)
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_NoAttackPathExists); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 106, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 106, __pyx_L1_error)

      /* "harmat/models/attackgraph.pyx":105
 *         if self.cy_all_paths.empty():
 *             self.find_paths()
 *             if self.cy_all_paths.empty():             # <<<<<<<<<<<<<<
 *                 raise NoAttackPathExists()
 * 
 */
    }

    /* "harmat/models/attackgraph.pyx":103
 * 
 *     def check_attack_paths(self):
 *         if self.cy_all_paths.empty():             # <<<<<<<<<<<<<<
 *             self.find_paths()
 *             if self.cy_all_paths.empty():
 */
  }

  /* "harmat/models/attackgraph.pyx":102
 *         return paths
 * 
 *     def check_attack_paths(self):             # <<<<<<<<<<<<<<
 *         if self.cy_all_paths.empty():
 *             self.find_paths()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.check_attack_paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":111
 *     @cython.boundscheck(False)
 *     @property
 *     def risk(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the risk of this AttackGraph
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_4risk_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_4risk_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_4risk___get__(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_4risk___get__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  double __pyx_v_cur_max;
  PyObject *__pyx_v_pathrisk = 0;
  std::vector<std::vector<__pyx_t_6harmat_5graph_Nptr> > ::iterator __pyx_v_path_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "harmat/models/attackgraph.pyx":129
 * 
 *         """
 *         self.check_attack_paths()             # <<<<<<<<<<<<<<
 *         cdef double cur_max
 *         cdef pathrisk
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_attack_paths); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "harmat/models/attackgraph.pyx":132
 *         cdef double cur_max
 *         cdef pathrisk
 *         cdef vector[vector[Nptr]].iterator path_it = self.cy_all_paths.begin()             # <<<<<<<<<<<<<<
 *         cur_max = self.path_risk(deref(path_it))
 *         inc(path_it)
 */
  __pyx_v_path_it = __pyx_v_self->cy_all_paths.begin();

  /* "harmat/models/attackgraph.pyx":133
 *         cdef pathrisk
 *         cdef vector[vector[Nptr]].iterator path_it = self.cy_all_paths.begin()
 *         cur_max = self.path_risk(deref(path_it))             # <<<<<<<<<<<<<<
 *         inc(path_it)
 *         while path_it != self.cy_all_paths.end():
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->path_risk(__pyx_v_self, (*__pyx_v_path_it)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cur_max = __pyx_t_4;

  /* "harmat/models/attackgraph.pyx":134
 *         cdef vector[vector[Nptr]].iterator path_it = self.cy_all_paths.begin()
 *         cur_max = self.path_risk(deref(path_it))
 *         inc(path_it)             # <<<<<<<<<<<<<<
 *         while path_it != self.cy_all_paths.end():
 *             pathrisk = self.path_risk(deref(path_it))
 */
  (++__pyx_v_path_it);

  /* "harmat/models/attackgraph.pyx":135
 *         cur_max = self.path_risk(deref(path_it))
 *         inc(path_it)
 *         while path_it != self.cy_all_paths.end():             # <<<<<<<<<<<<<<
 *             pathrisk = self.path_risk(deref(path_it))
 *             if pathrisk > cur_max:
 */
  while (1) {
    __pyx_t_5 = ((__pyx_v_path_it != __pyx_v_self->cy_all_paths.end()) != 0);
    if (!__pyx_t_5) break;

    /* "harmat/models/attackgraph.pyx":136
 *         inc(path_it)
 *         while path_it != self.cy_all_paths.end():
 *             pathrisk = self.path_risk(deref(path_it))             # <<<<<<<<<<<<<<
 *             if pathrisk > cur_max:
 *                 cur_max = pathrisk
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->path_risk(__pyx_v_self, (*__pyx_v_path_it)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_pathrisk, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "harmat/models/attackgraph.pyx":137
 *         while path_it != self.cy_all_paths.end():
 *             pathrisk = self.path_risk(deref(path_it))
 *             if pathrisk > cur_max:             # <<<<<<<<<<<<<<
 *                 cur_max = pathrisk
 *             inc(path_it)
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_cur_max); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_pathrisk, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_5) {

      /* "harmat/models/attackgraph.pyx":138
 *             pathrisk = self.path_risk(deref(path_it))
 *             if pathrisk > cur_max:
 *                 cur_max = pathrisk             # <<<<<<<<<<<<<<
 *             inc(path_it)
 *         return cur_max
 */
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_pathrisk); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 138, __pyx_L1_error)
      __pyx_v_cur_max = __pyx_t_4;

      /* "harmat/models/attackgraph.pyx":137
 *         while path_it != self.cy_all_paths.end():
 *             pathrisk = self.path_risk(deref(path_it))
 *             if pathrisk > cur_max:             # <<<<<<<<<<<<<<
 *                 cur_max = pathrisk
 *             inc(path_it)
 */
    }

    /* "harmat/models/attackgraph.pyx":139
 *             if pathrisk > cur_max:
 *                 cur_max = pathrisk
 *             inc(path_it)             # <<<<<<<<<<<<<<
 *         return cur_max
 * 
 */
    (++__pyx_v_path_it);
  }

  /* "harmat/models/attackgraph.pyx":140
 *                 cur_max = pathrisk
 *             inc(path_it)
 *         return cur_max             # <<<<<<<<<<<<<<
 * 
 *     @cython.wraparound(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_cur_max); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":111
 *     @cython.boundscheck(False)
 *     @property
 *     def risk(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the risk of this AttackGraph
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.risk.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pathrisk);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":144
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef path_risk(self, vector[NodeProperty*] path):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the risk of a path
 */

static PyObject *__pyx_f_6harmat_6models_11attackgraph_11AttackGraph_path_risk(CYTHON_UNUSED struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self, std::vector<struct __pyx_t_6harmat_5graph_NodeProperty *>  __pyx_v_path) {
  double __pyx_v_path_risk_sum;
  std::vector<struct __pyx_t_6harmat_5graph_NodeProperty *> ::iterator __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("path_risk", 0);

  /* "harmat/models/attackgraph.pyx":157
 * 
 *         """
 *         cdef double path_risk_sum = 0             # <<<<<<<<<<<<<<
 *         cdef vector[NodeProperty*].iterator it = path.begin()
 *         inc(it)
 */
  __pyx_v_path_risk_sum = 0.0;

  /* "harmat/models/attackgraph.pyx":158
 *         """
 *         cdef double path_risk_sum = 0
 *         cdef vector[NodeProperty*].iterator it = path.begin()             # <<<<<<<<<<<<<<
 *         inc(it)
 *         while it != path.end():
 */
  __pyx_v_it = __pyx_v_path.begin();

  /* "harmat/models/attackgraph.pyx":159
 *         cdef double path_risk_sum = 0
 *         cdef vector[NodeProperty*].iterator it = path.begin()
 *         inc(it)             # <<<<<<<<<<<<<<
 *         while it != path.end():
 *             path_risk_sum += deref(it).risk * deref(it).asset_value
 */
  (++__pyx_v_it);

  /* "harmat/models/attackgraph.pyx":160
 *         cdef vector[NodeProperty*].iterator it = path.begin()
 *         inc(it)
 *         while it != path.end():             # <<<<<<<<<<<<<<
 *             path_risk_sum += deref(it).risk * deref(it).asset_value
 *             inc(it)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it != __pyx_v_path.end()) != 0);
    if (!__pyx_t_1) break;

    /* "harmat/models/attackgraph.pyx":161
 *         inc(it)
 *         while it != path.end():
 *             path_risk_sum += deref(it).risk * deref(it).asset_value             # <<<<<<<<<<<<<<
 *             inc(it)
 *         return path_risk_sum
 */
    __pyx_v_path_risk_sum = (__pyx_v_path_risk_sum + ((*__pyx_v_it)->risk * (*__pyx_v_it)->asset_value));

    /* "harmat/models/attackgraph.pyx":162
 *         while it != path.end():
 *             path_risk_sum += deref(it).risk * deref(it).asset_value
 *             inc(it)             # <<<<<<<<<<<<<<
 *         return path_risk_sum
 * 
 */
    (++__pyx_v_it);
  }

  /* "harmat/models/attackgraph.pyx":163
 *             path_risk_sum += deref(it).risk * deref(it).asset_value
 *             inc(it)
 *         return path_risk_sum             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_path_risk_sum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":144
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef path_risk(self, vector[NodeProperty*] path):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the risk of a path
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.path_risk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":166
 * 
 *     @property
 *     def cost(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the cost of this Attack Grpah
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_4cost_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_4cost_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_4cost___get__(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_4cost___get__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  double __pyx_v_cur_min;
  PyObject *__pyx_v_pathrisk = 0;
  std::vector<std::vector<__pyx_t_6harmat_5graph_Nptr> > ::iterator __pyx_v_path_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "harmat/models/attackgraph.pyx":180
 *             The cost of an attack
 *         """
 *         self.check_attack_paths()             # <<<<<<<<<<<<<<
 *         cdef double cur_min
 *         cdef pathrisk
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_attack_paths); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "harmat/models/attackgraph.pyx":183
 *         cdef double cur_min
 *         cdef pathrisk
 *         cdef vector[vector[Nptr]].iterator path_it = self.cy_all_paths.begin()             # <<<<<<<<<<<<<<
 *         cur_min = self.path_risk(deref(path_it))
 *         inc(path_it)
 */
  __pyx_v_path_it = __pyx_v_self->cy_all_paths.begin();

  /* "harmat/models/attackgraph.pyx":184
 *         cdef pathrisk
 *         cdef vector[vector[Nptr]].iterator path_it = self.cy_all_paths.begin()
 *         cur_min = self.path_risk(deref(path_it))             # <<<<<<<<<<<<<<
 *         inc(path_it)
 *         while path_it != self.cy_all_paths.end():
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->path_risk(__pyx_v_self, (*__pyx_v_path_it)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cur_min = __pyx_t_4;

  /* "harmat/models/attackgraph.pyx":185
 *         cdef vector[vector[Nptr]].iterator path_it = self.cy_all_paths.begin()
 *         cur_min = self.path_risk(deref(path_it))
 *         inc(path_it)             # <<<<<<<<<<<<<<
 *         while path_it != self.cy_all_paths.end():
 *             pathrisk = self.path_risk(deref(path_it))
 */
  (++__pyx_v_path_it);

  /* "harmat/models/attackgraph.pyx":186
 *         cur_min = self.path_risk(deref(path_it))
 *         inc(path_it)
 *         while path_it != self.cy_all_paths.end():             # <<<<<<<<<<<<<<
 *             pathrisk = self.path_risk(deref(path_it))
 *             if pathrisk < cur_min:
 */
  while (1) {
    __pyx_t_5 = ((__pyx_v_path_it != __pyx_v_self->cy_all_paths.end()) != 0);
    if (!__pyx_t_5) break;

    /* "harmat/models/attackgraph.pyx":187
 *         inc(path_it)
 *         while path_it != self.cy_all_paths.end():
 *             pathrisk = self.path_risk(deref(path_it))             # <<<<<<<<<<<<<<
 *             if pathrisk < cur_min:
 *                 cur_min = pathrisk
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->path_risk(__pyx_v_self, (*__pyx_v_path_it)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_pathrisk, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "harmat/models/attackgraph.pyx":188
 *         while path_it != self.cy_all_paths.end():
 *             pathrisk = self.path_risk(deref(path_it))
 *             if pathrisk < cur_min:             # <<<<<<<<<<<<<<
 *                 cur_min = pathrisk
 *             inc(path_it)
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_cur_min); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_pathrisk, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_5) {

      /* "harmat/models/attackgraph.pyx":189
 *             pathrisk = self.path_risk(deref(path_it))
 *             if pathrisk < cur_min:
 *                 cur_min = pathrisk             # <<<<<<<<<<<<<<
 *             inc(path_it)
 *         return cur_min
 */
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_pathrisk); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 189, __pyx_L1_error)
      __pyx_v_cur_min = __pyx_t_4;

      /* "harmat/models/attackgraph.pyx":188
 *         while path_it != self.cy_all_paths.end():
 *             pathrisk = self.path_risk(deref(path_it))
 *             if pathrisk < cur_min:             # <<<<<<<<<<<<<<
 *                 cur_min = pathrisk
 *             inc(path_it)
 */
    }

    /* "harmat/models/attackgraph.pyx":190
 *             if pathrisk < cur_min:
 *                 cur_min = pathrisk
 *             inc(path_it)             # <<<<<<<<<<<<<<
 *         return cur_min
 * 
 */
    (++__pyx_v_path_it);
  }

  /* "harmat/models/attackgraph.pyx":191
 *                 cur_min = pathrisk
 *             inc(path_it)
 *         return cur_min             # <<<<<<<<<<<<<<
 * 
 *     @cython.wraparound(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_cur_min); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":166
 * 
 *     @property
 *     def cost(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the cost of this Attack Grpah
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.cost.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pathrisk);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":194
 * 
 *     @cython.wraparound(False)
 *     cdef path_cost(self, vector[NodeProperty*] path):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the cost of an attack for a single path
 */

static PyObject *__pyx_f_6harmat_6models_11attackgraph_11AttackGraph_path_cost(CYTHON_UNUSED struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self, std::vector<struct __pyx_t_6harmat_5graph_NodeProperty *>  __pyx_v_path) {
  double __pyx_v_path_cost_sum;
  std::vector<struct __pyx_t_6harmat_5graph_NodeProperty *> ::iterator __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("path_cost", 0);

  /* "harmat/models/attackgraph.pyx":205
 *             The calculated cost value
 *         """
 *         cdef double path_cost_sum = 0             # <<<<<<<<<<<<<<
 *         cdef vector[NodeProperty*].iterator it = path.begin()
 *         inc(it)
 */
  __pyx_v_path_cost_sum = 0.0;

  /* "harmat/models/attackgraph.pyx":206
 *         """
 *         cdef double path_cost_sum = 0
 *         cdef vector[NodeProperty*].iterator it = path.begin()             # <<<<<<<<<<<<<<
 *         inc(it)
 *         while it != path.end():
 */
  __pyx_v_it = __pyx_v_path.begin();

  /* "harmat/models/attackgraph.pyx":207
 *         cdef double path_cost_sum = 0
 *         cdef vector[NodeProperty*].iterator it = path.begin()
 *         inc(it)             # <<<<<<<<<<<<<<
 *         while it != path.end():
 *             path_cost_sum += deref(it).cost
 */
  (++__pyx_v_it);

  /* "harmat/models/attackgraph.pyx":208
 *         cdef vector[NodeProperty*].iterator it = path.begin()
 *         inc(it)
 *         while it != path.end():             # <<<<<<<<<<<<<<
 *             path_cost_sum += deref(it).cost
 *             inc(it)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it != __pyx_v_path.end()) != 0);
    if (!__pyx_t_1) break;

    /* "harmat/models/attackgraph.pyx":209
 *         inc(it)
 *         while it != path.end():
 *             path_cost_sum += deref(it).cost             # <<<<<<<<<<<<<<
 *             inc(it)
 *         return path_cost_sum
 */
    __pyx_v_path_cost_sum = (__pyx_v_path_cost_sum + (*__pyx_v_it)->cost);

    /* "harmat/models/attackgraph.pyx":210
 *         while it != path.end():
 *             path_cost_sum += deref(it).cost
 *             inc(it)             # <<<<<<<<<<<<<<
 *         return path_cost_sum
 * 
 */
    (++__pyx_v_it);
  }

  /* "harmat/models/attackgraph.pyx":211
 *             path_cost_sum += deref(it).cost
 *             inc(it)
 *         return path_cost_sum             # <<<<<<<<<<<<<<
 * 
 *     def return_on_attack(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_path_cost_sum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":194
 * 
 *     @cython.wraparound(False)
 *     cdef path_cost(self, vector[NodeProperty*] path):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the cost of an attack for a single path
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.path_cost", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":213
 *         return path_cost_sum
 * 
 *     def return_on_attack(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the return on an attack.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_15return_on_attack(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6harmat_6models_11attackgraph_11AttackGraph_14return_on_attack[] = "\n        Calculate the return on an attack.\n        The maximum value from all attack paths are selected.\n        Args:\n            source : Node object. The source node. Usually the attacker.\n\n            target : Node object. The target node.\n        Returns:\n            Numeric\n        ";
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_15return_on_attack(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("return_on_attack (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_14return_on_attack(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_16return_on_attack_2generator2(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "harmat/models/attackgraph.pyx":225
 *         """
 *         self.check_attack_paths()
 *         return max(self.path_return(path) for path in self.all_paths)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_16return_on_attack_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr *)__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr(__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 225, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_16return_on_attack_2generator2, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_return_on_attack_locals_genexpr, __pyx_n_s_harmat_models_attackgraph); if (unlikely(!gen)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.return_on_attack.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_16return_on_attack_2generator2(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 225, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 225, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self), __pyx_n_s_all_paths); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 225, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 225, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 225, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 225, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_path);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_path, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 225, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self), __pyx_n_s_path_return); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_cur_scope->__pyx_v_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_path};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_path};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 225, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_path);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_path);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_cur_scope->__pyx_v_path);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 225, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":213
 *         return path_cost_sum
 * 
 *     def return_on_attack(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the return on an attack.
 */

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_14return_on_attack(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("return_on_attack", 0);
  __pyx_cur_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack *)__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack(__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 213, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "harmat/models/attackgraph.pyx":224
 *             Numeric
 *         """
 *         self.check_attack_paths()             # <<<<<<<<<<<<<<
 *         return max(self.path_return(path) for path in self.all_paths)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_check_attack_paths); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "harmat/models/attackgraph.pyx":225
 *         """
 *         self.check_attack_paths()
 *         return max(self.path_return(path) for path in self.all_paths)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_16return_on_attack_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_max, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":213
 *         return path_cost_sum
 * 
 *     def return_on_attack(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the return on an attack.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.return_on_attack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":228
 * 
 *     @staticmethod
 *     def path_return(path):             # <<<<<<<<<<<<<<
 *         """
 *         probability, impact and cost attributes must be set for all nodes
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_17path_return(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6harmat_6models_11attackgraph_11AttackGraph_16path_return[] = "\n        probability, impact and cost attributes must be set for all nodes\n        ";
static PyMethodDef __pyx_mdef_6harmat_6models_11attackgraph_11AttackGraph_17path_return = {"path_return", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_17path_return, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6harmat_6models_11attackgraph_11AttackGraph_16path_return};
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_17path_return(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_path = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("path_return (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_path,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "path_return") < 0)) __PYX_ERR(0, 228, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_path = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("path_return", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 228, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.path_return", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_16path_return(__pyx_v_path);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_16path_return(PyObject *__pyx_v_path) {
  PyObject *__pyx_v_path_return = NULL;
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("path_return", 0);

  /* "harmat/models/attackgraph.pyx":232
 *         probability, impact and cost attributes must be set for all nodes
 *         """
 *         path_return = 0             # <<<<<<<<<<<<<<
 *         for node in path[1:]:
 *             if node.cost == 0:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_path_return = __pyx_int_0;

  /* "harmat/models/attackgraph.pyx":233
 *         """
 *         path_return = 0
 *         for node in path[1:]:             # <<<<<<<<<<<<<<
 *             if node.cost == 0:
 *                 raise Exception('Zero cost host is not permitted')
 */
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_path, 1, 0, NULL, NULL, &__pyx_slice__3, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 233, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 233, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 233, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 233, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "harmat/models/attackgraph.pyx":234
 *         path_return = 0
 *         for node in path[1:]:
 *             if node.cost == 0:             # <<<<<<<<<<<<<<
 *                 raise Exception('Zero cost host is not permitted')
 *             path_return += node.risk / node.cost
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_cost); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {

      /* "harmat/models/attackgraph.pyx":235
 *         for node in path[1:]:
 *             if node.cost == 0:
 *                 raise Exception('Zero cost host is not permitted')             # <<<<<<<<<<<<<<
 *             path_return += node.risk / node.cost
 *         return path_return
 */
      __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(0, 235, __pyx_L1_error)

      /* "harmat/models/attackgraph.pyx":234
 *         path_return = 0
 *         for node in path[1:]:
 *             if node.cost == 0:             # <<<<<<<<<<<<<<
 *                 raise Exception('Zero cost host is not permitted')
 *             path_return += node.risk / node.cost
 */
    }

    /* "harmat/models/attackgraph.pyx":236
 *             if node.cost == 0:
 *                 raise Exception('Zero cost host is not permitted')
 *             path_return += node.risk / node.cost             # <<<<<<<<<<<<<<
 *         return path_return
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_risk); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_cost); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_path_return, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_path_return, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "harmat/models/attackgraph.pyx":233
 *         """
 *         path_return = 0
 *         for node in path[1:]:             # <<<<<<<<<<<<<<
 *             if node.cost == 0:
 *                 raise Exception('Zero cost host is not permitted')
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "harmat/models/attackgraph.pyx":237
 *                 raise Exception('Zero cost host is not permitted')
 *             path_return += node.risk / node.cost
 *         return path_return             # <<<<<<<<<<<<<<
 * 
 *     def mean_path_length(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_path_return);
  __pyx_r = __pyx_v_path_return;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":228
 * 
 *     @staticmethod
 *     def path_return(path):             # <<<<<<<<<<<<<<
 *         """
 *         probability, impact and cost attributes must be set for all nodes
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.path_return", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_path_return);
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":239
 *         return path_return
 * 
 *     def mean_path_length(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the Mean of Path Metric
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_19mean_path_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6harmat_6models_11attackgraph_11AttackGraph_18mean_path_length[] = "\n        Calculate the Mean of Path Metric\n        Args:\n            source:\n            target:\n        Returns:\n            Numerical\n        ";
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_19mean_path_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mean_path_length (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_18mean_path_length(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_16mean_path_length_2generator3(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "harmat/models/attackgraph.pyx":249
 *         """
 *         self.check_attack_paths()
 *         path_len_generator = (len(path) - 1 for path in self.all_paths)             # <<<<<<<<<<<<<<
 *         return statistics.mean(path_len_generator)
 * 
 */

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_16mean_path_length_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr *)__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr(__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 249, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_16mean_path_length_2generator3, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_mean_path_length_locals_genexpr, __pyx_n_s_harmat_models_attackgraph); if (unlikely(!gen)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.mean_path_length.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_16mean_path_length_2generator3(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 249, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 249, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self), __pyx_n_s_all_paths); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 249, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 249, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 249, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 249, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_path);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_path, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_5 = PyObject_Length(__pyx_cur_scope->__pyx_v_path); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 249, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t((__pyx_t_5 - 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 249, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":239
 *         return path_return
 * 
 *     def mean_path_length(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the Mean of Path Metric
 */

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_18mean_path_length(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length *__pyx_cur_scope;
  PyObject *__pyx_v_path_len_generator = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("mean_path_length", 0);
  __pyx_cur_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length *)__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length(__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 239, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "harmat/models/attackgraph.pyx":248
 *             Numerical
 *         """
 *         self.check_attack_paths()             # <<<<<<<<<<<<<<
 *         path_len_generator = (len(path) - 1 for path in self.all_paths)
 *         return statistics.mean(path_len_generator)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_check_attack_paths); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "harmat/models/attackgraph.pyx":249
 *         """
 *         self.check_attack_paths()
 *         path_len_generator = (len(path) - 1 for path in self.all_paths)             # <<<<<<<<<<<<<<
 *         return statistics.mean(path_len_generator)
 * 
 */
  __pyx_t_1 = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_16mean_path_length_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_path_len_generator = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "harmat/models/attackgraph.pyx":250
 *         self.check_attack_paths()
 *         path_len_generator = (len(path) - 1 for path in self.all_paths)
 *         return statistics.mean(path_len_generator)             # <<<<<<<<<<<<<<
 * 
 *     def mode_path_length(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_statistics); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_mean); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_path_len_generator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_path_len_generator};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_path_len_generator};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 250, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_path_len_generator);
      __Pyx_GIVEREF(__pyx_v_path_len_generator);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_path_len_generator);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":239
 *         return path_return
 * 
 *     def mean_path_length(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the Mean of Path Metric
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.mean_path_length", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_path_len_generator);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":252
 *         return statistics.mean(path_len_generator)
 * 
 *     def mode_path_length(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the Mode of Path Length Metric
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_21mode_path_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6harmat_6models_11attackgraph_11AttackGraph_20mode_path_length[] = "\n        Calculate the Mode of Path Length Metric\n        ";
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_21mode_path_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mode_path_length (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_20mode_path_length(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_16mode_path_length_2generator4(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "harmat/models/attackgraph.pyx":257
 *         """
 *         self.check_attack_paths()
 *         return max(len(path) for path in self.all_paths) - 1             # <<<<<<<<<<<<<<
 * 
 *     def stdev_path_length(self):
 */

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_16mode_path_length_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr *)__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr(__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 257, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_16mode_path_length_2generator4, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_mode_path_length_locals_genexpr, __pyx_n_s_harmat_models_attackgraph); if (unlikely(!gen)) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.mode_path_length.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_16mode_path_length_2generator4(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 257, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 257, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self), __pyx_n_s_all_paths); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 257, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 257, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 257, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 257, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_path);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_path, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_5 = PyObject_Length(__pyx_cur_scope->__pyx_v_path); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 257, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 257, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":252
 *         return statistics.mean(path_len_generator)
 * 
 *     def mode_path_length(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the Mode of Path Length Metric
 */

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_20mode_path_length(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("mode_path_length", 0);
  __pyx_cur_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length *)__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length(__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 252, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "harmat/models/attackgraph.pyx":256
 *         Calculate the Mode of Path Length Metric
 *         """
 *         self.check_attack_paths()             # <<<<<<<<<<<<<<
 *         return max(len(path) for path in self.all_paths) - 1
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_check_attack_paths); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "harmat/models/attackgraph.pyx":257
 *         """
 *         self.check_attack_paths()
 *         return max(len(path) for path in self.all_paths) - 1             # <<<<<<<<<<<<<<
 * 
 *     def stdev_path_length(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_16mode_path_length_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_max, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":252
 *         return statistics.mean(path_len_generator)
 * 
 *     def mode_path_length(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the Mode of Path Length Metric
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.mode_path_length", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":259
 *         return max(len(path) for path in self.all_paths) - 1
 * 
 *     def stdev_path_length(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the standard deviation of path length
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_23stdev_path_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6harmat_6models_11attackgraph_11AttackGraph_22stdev_path_length[] = "\n        Calculate the standard deviation of path length\n        ";
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_23stdev_path_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stdev_path_length (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_22stdev_path_length(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_17stdev_path_length_2generator5(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "harmat/models/attackgraph.pyx":264
 *         """
 *         self.check_attack_paths()
 *         path_len_generator = (len(path) - 1 for path in self.all_paths)             # <<<<<<<<<<<<<<
 *         try:
 *             return statistics.stdev(path_len_generator)
 */

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_17stdev_path_length_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr *)__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr(__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 264, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_17stdev_path_length_2generator5, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_stdev_path_length_locals_genexpr, __pyx_n_s_harmat_models_attackgraph); if (unlikely(!gen)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.stdev_path_length.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_17stdev_path_length_2generator5(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 264, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 264, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self), __pyx_n_s_all_paths); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 264, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 264, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 264, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 264, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_path);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_path, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_5 = PyObject_Length(__pyx_cur_scope->__pyx_v_path); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 264, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t((__pyx_t_5 - 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 264, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":259
 *         return max(len(path) for path in self.all_paths) - 1
 * 
 *     def stdev_path_length(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the standard deviation of path length
 */

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_22stdev_path_length(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length *__pyx_cur_scope;
  PyObject *__pyx_v_path_len_generator = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("stdev_path_length", 0);
  __pyx_cur_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length *)__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length(__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 259, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "harmat/models/attackgraph.pyx":263
 *         Calculate the standard deviation of path length
 *         """
 *         self.check_attack_paths()             # <<<<<<<<<<<<<<
 *         path_len_generator = (len(path) - 1 for path in self.all_paths)
 *         try:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_check_attack_paths); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "harmat/models/attackgraph.pyx":264
 *         """
 *         self.check_attack_paths()
 *         path_len_generator = (len(path) - 1 for path in self.all_paths)             # <<<<<<<<<<<<<<
 *         try:
 *             return statistics.stdev(path_len_generator)
 */
  __pyx_t_1 = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_17stdev_path_length_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_path_len_generator = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "harmat/models/attackgraph.pyx":265
 *         self.check_attack_paths()
 *         path_len_generator = (len(path) - 1 for path in self.all_paths)
 *         try:             # <<<<<<<<<<<<<<
 *             return statistics.stdev(path_len_generator)
 *         except:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    /*try:*/ {

      /* "harmat/models/attackgraph.pyx":266
 *         path_len_generator = (len(path) - 1 for path in self.all_paths)
 *         try:
 *             return statistics.stdev(path_len_generator)             # <<<<<<<<<<<<<<
 *         except:
 *             return 0
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_statistics); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_stdev); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 266, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_2) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_path_len_generator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_path_len_generator};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_path_len_generator};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 266, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
          __Pyx_INCREF(__pyx_v_path_len_generator);
          __Pyx_GIVEREF(__pyx_v_path_len_generator);
          PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_path_len_generator);
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L7_try_return;

      /* "harmat/models/attackgraph.pyx":265
 *         self.check_attack_paths()
 *         path_len_generator = (len(path) - 1 for path in self.all_paths)
 *         try:             # <<<<<<<<<<<<<<
 *             return statistics.stdev(path_len_generator)
 *         except:
 */
    }
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "harmat/models/attackgraph.pyx":267
 *         try:
 *             return statistics.stdev(path_len_generator)
 *         except:             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
    /*except:*/ {
      __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.stdev_path_length", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_3, &__pyx_t_7) < 0) __PYX_ERR(0, 267, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_7);

      /* "harmat/models/attackgraph.pyx":268
 *             return statistics.stdev(path_len_generator)
 *         except:
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     def shortest_path_length(self):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_int_0);
      __pyx_r = __pyx_int_0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_except_return;
    }
    __pyx_L5_except_error:;

    /* "harmat/models/attackgraph.pyx":265
 *         self.check_attack_paths()
 *         path_len_generator = (len(path) - 1 for path in self.all_paths)
 *         try:             # <<<<<<<<<<<<<<
 *             return statistics.stdev(path_len_generator)
 *         except:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    goto __pyx_L0;
  }

  /* "harmat/models/attackgraph.pyx":259
 *         return max(len(path) for path in self.all_paths) - 1
 * 
 *     def stdev_path_length(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the standard deviation of path length
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.stdev_path_length", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_path_len_generator);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":270
 *             return 0
 * 
 *     def shortest_path_length(self):             # <<<<<<<<<<<<<<
 *         shortest_path = networkx.shortest_path(self, self.source, self.target)
 *         return len(shortest_path) - 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_25shortest_path_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_25shortest_path_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shortest_path_length (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_24shortest_path_length(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_24shortest_path_length(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  PyObject *__pyx_v_shortest_path = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("shortest_path_length", 0);

  /* "harmat/models/attackgraph.pyx":271
 * 
 *     def shortest_path_length(self):
 *         shortest_path = networkx.shortest_path(self, self.source, self.target)             # <<<<<<<<<<<<<<
 *         return len(shortest_path) - 1
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_networkx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_shortest_path); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, ((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_self->source), ((PyObject *)__pyx_v_self->target)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 271, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, ((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_self->source), ((PyObject *)__pyx_v_self->target)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 271, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(((PyObject *)__pyx_v_self->source));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->source));
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, ((PyObject *)__pyx_v_self->source));
    __Pyx_INCREF(((PyObject *)__pyx_v_self->target));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->target));
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, ((PyObject *)__pyx_v_self->target));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_shortest_path = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "harmat/models/attackgraph.pyx":272
 *     def shortest_path_length(self):
 *         shortest_path = networkx.shortest_path(self, self.source, self.target)
 *         return len(shortest_path) - 1             # <<<<<<<<<<<<<<
 * 
 *     def add_edge_between(self, node1, nodes, two_ways=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = PyObject_Length(__pyx_v_shortest_path); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 272, __pyx_L1_error)
  __pyx_t_1 = PyInt_FromSsize_t((__pyx_t_6 - 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":270
 *             return 0
 * 
 *     def shortest_path_length(self):             # <<<<<<<<<<<<<<
 *         shortest_path = networkx.shortest_path(self, self.source, self.target)
 *         return len(shortest_path) - 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.shortest_path_length", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_shortest_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":274
 *         return len(shortest_path) - 1
 * 
 *     def add_edge_between(self, node1, nodes, two_ways=False):             # <<<<<<<<<<<<<<
 *         """
 *         Add edges between a node (node1) and all other nodes in nodes
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_27add_edge_between(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6harmat_6models_11attackgraph_11AttackGraph_26add_edge_between[] = "\n        Add edges between a node (node1) and all other nodes in nodes\n\n        Args:\n            node1: Node object\n            nodes: Either Node object or a iterable containing nodes\n        ";
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_27add_edge_between(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_node1 = 0;
  PyObject *__pyx_v_nodes = 0;
  PyObject *__pyx_v_two_ways = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_edge_between (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node1,&__pyx_n_s_nodes,&__pyx_n_s_two_ways,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_node1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_edge_between", 0, 2, 3, 1); __PYX_ERR(0, 274, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_two_ways);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_edge_between") < 0)) __PYX_ERR(0, 274, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_node1 = values[0];
    __pyx_v_nodes = values[1];
    __pyx_v_two_ways = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_edge_between", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 274, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.add_edge_between", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_26add_edge_between(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self), __pyx_v_node1, __pyx_v_nodes, __pyx_v_two_ways);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_26add_edge_between(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self, PyObject *__pyx_v_node1, PyObject *__pyx_v_nodes, PyObject *__pyx_v_two_ways) {
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  __Pyx_RefNannySetupContext("add_edge_between", 0);
  __Pyx_INCREF(__pyx_v_nodes);

  /* "harmat/models/attackgraph.pyx":282
 *             nodes: Either Node object or a iterable containing nodes
 *         """
 *         if isinstance(nodes, hm.Node):             # <<<<<<<<<<<<<<
 *             nodes = [nodes]
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_hm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Node); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_nodes, __pyx_t_2); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "harmat/models/attackgraph.pyx":283
 *         """
 *         if isinstance(nodes, hm.Node):
 *             nodes = [nodes]             # <<<<<<<<<<<<<<
 * 
 *         for node in nodes:
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_nodes);
    __Pyx_GIVEREF(__pyx_v_nodes);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_v_nodes);
    __Pyx_DECREF_SET(__pyx_v_nodes, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "harmat/models/attackgraph.pyx":282
 *             nodes: Either Node object or a iterable containing nodes
 *         """
 *         if isinstance(nodes, hm.Node):             # <<<<<<<<<<<<<<
 *             nodes = [nodes]
 * 
 */
  }

  /* "harmat/models/attackgraph.pyx":285
 *             nodes = [nodes]
 * 
 *         for node in nodes:             # <<<<<<<<<<<<<<
 *             self.add_edge(node1, node)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_nodes)) || PyTuple_CheckExact(__pyx_v_nodes)) {
    __pyx_t_2 = __pyx_v_nodes; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_nodes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 285, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 285, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 285, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 285, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "harmat/models/attackgraph.pyx":286
 * 
 *         for node in nodes:
 *             self.add_edge(node1, node)             # <<<<<<<<<<<<<<
 * 
 *         if two_ways is True:
 */
    if (!(likely(((__pyx_v_node1) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_node1, __pyx_ptype_6harmat_5graph_Node))))) __PYX_ERR(0, 286, __pyx_L1_error)
    if (!(likely(((__pyx_v_node) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_node, __pyx_ptype_6harmat_5graph_Node))))) __PYX_ERR(0, 286, __pyx_L1_error)
    __pyx_t_1 = ((struct __pyx_vtabstruct_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.add_edge(((struct __pyx_obj_6harmat_5graph_HarmatGraph *)__pyx_v_self), ((struct __pyx_obj_6harmat_5graph_Node *)__pyx_v_node1), ((struct __pyx_obj_6harmat_5graph_Node *)__pyx_v_node), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "harmat/models/attackgraph.pyx":285
 *             nodes = [nodes]
 * 
 *         for node in nodes:             # <<<<<<<<<<<<<<
 *             self.add_edge(node1, node)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "harmat/models/attackgraph.pyx":288
 *             self.add_edge(node1, node)
 * 
 *         if two_ways is True:             # <<<<<<<<<<<<<<
 *             for node in nodes:
 *                 self.add_edge(node, node1)
 */
  __pyx_t_4 = (__pyx_v_two_ways == Py_True);
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {

    /* "harmat/models/attackgraph.pyx":289
 * 
 *         if two_ways is True:
 *             for node in nodes:             # <<<<<<<<<<<<<<
 *                 self.add_edge(node, node1)
 * 
 */
    if (likely(PyList_CheckExact(__pyx_v_nodes)) || PyTuple_CheckExact(__pyx_v_nodes)) {
      __pyx_t_2 = __pyx_v_nodes; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_nodes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 289, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 289, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 289, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 289, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_6(__pyx_t_2);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 289, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "harmat/models/attackgraph.pyx":290
 *         if two_ways is True:
 *             for node in nodes:
 *                 self.add_edge(node, node1)             # <<<<<<<<<<<<<<
 * 
 *     def find_node(self, node_name):
 */
      if (!(likely(((__pyx_v_node) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_node, __pyx_ptype_6harmat_5graph_Node))))) __PYX_ERR(0, 290, __pyx_L1_error)
      if (!(likely(((__pyx_v_node1) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_node1, __pyx_ptype_6harmat_5graph_Node))))) __PYX_ERR(0, 290, __pyx_L1_error)
      __pyx_t_1 = ((struct __pyx_vtabstruct_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.add_edge(((struct __pyx_obj_6harmat_5graph_HarmatGraph *)__pyx_v_self), ((struct __pyx_obj_6harmat_5graph_Node *)__pyx_v_node), ((struct __pyx_obj_6harmat_5graph_Node *)__pyx_v_node1), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "harmat/models/attackgraph.pyx":289
 * 
 *         if two_ways is True:
 *             for node in nodes:             # <<<<<<<<<<<<<<
 *                 self.add_edge(node, node1)
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "harmat/models/attackgraph.pyx":288
 *             self.add_edge(node1, node)
 * 
 *         if two_ways is True:             # <<<<<<<<<<<<<<
 *             for node in nodes:
 *                 self.add_edge(node, node1)
 */
  }

  /* "harmat/models/attackgraph.pyx":274
 *         return len(shortest_path) - 1
 * 
 *     def add_edge_between(self, node1, nodes, two_ways=False):             # <<<<<<<<<<<<<<
 *         """
 *         Add edges between a node (node1) and all other nodes in nodes
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.add_edge_between", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XDECREF(__pyx_v_nodes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":292
 *                 self.add_edge(node, node1)
 * 
 *     def find_node(self, node_name):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the object with the same name as node_name
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_29find_node(PyObject *__pyx_v_self, PyObject *__pyx_v_node_name); /*proto*/
static char __pyx_doc_6harmat_6models_11attackgraph_11AttackGraph_28find_node[] = "\n        Returns the object with the same name as node_name\n\n        Args:\n            node_name: String\n        Returns:\n            Node object\n            or\n            None: if no node with node_name is found\n        ";
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_29find_node(PyObject *__pyx_v_self, PyObject *__pyx_v_node_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_node (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_28find_node(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self), ((PyObject *)__pyx_v_node_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_28find_node(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self, PyObject *__pyx_v_node_name) {
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("find_node", 0);

  /* "harmat/models/attackgraph.pyx":303
 *             None: if no node with node_name is found
 *         """
 *         for node in self.nodes():             # <<<<<<<<<<<<<<
 *             if node.name == node_name:
 *                 return node
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nodes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 303, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 303, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 303, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 303, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "harmat/models/attackgraph.pyx":304
 *         """
 *         for node in self.nodes():
 *             if node.name == node_name:             # <<<<<<<<<<<<<<
 *                 return node
 *         return None
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_v_node_name, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_6) {

      /* "harmat/models/attackgraph.pyx":305
 *         for node in self.nodes():
 *             if node.name == node_name:
 *                 return node             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_node);
      __pyx_r = __pyx_v_node;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "harmat/models/attackgraph.pyx":304
 *         """
 *         for node in self.nodes():
 *             if node.name == node_name:             # <<<<<<<<<<<<<<
 *                 return node
 *         return None
 */
    }

    /* "harmat/models/attackgraph.pyx":303
 *             None: if no node with node_name is found
 *         """
 *         for node in self.nodes():             # <<<<<<<<<<<<<<
 *             if node.name == node_name:
 *                 return node
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "harmat/models/attackgraph.pyx":306
 *             if node.name == node_name:
 *                 return node
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":292
 *                 self.add_edge(node, node1)
 * 
 *     def find_node(self, node_name):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the object with the same name as node_name
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.find_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":309
 * 
 *     @property
 *     def betweenness_centrality(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculates the betweenness centrality
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_22betweenness_centrality_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_22betweenness_centrality_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_22betweenness_centrality___get__(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_22betweenness_centrality___get__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "harmat/models/attackgraph.pyx":315
 *              A dictionary of nodes with values assigned to them
 *         """
 *         return networkx.betweenness_centrality(self)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_networkx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_betweenness_centrality); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, ((PyObject *)__pyx_v_self)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, ((PyObject *)__pyx_v_self)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, ((PyObject *)__pyx_v_self));
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":309
 * 
 *     @property
 *     def betweenness_centrality(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculates the betweenness centrality
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.betweenness_centrality.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":318
 * 
 *     @property
 *     def closeness_centrality(self):             # <<<<<<<<<<<<<<
 *         return networkx.closeness_centrality(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_20closeness_centrality_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_20closeness_centrality_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_20closeness_centrality___get__(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_20closeness_centrality___get__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "harmat/models/attackgraph.pyx":319
 *     @property
 *     def closeness_centrality(self):
 *         return networkx.closeness_centrality(self)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_networkx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_closeness_centrality); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, ((PyObject *)__pyx_v_self)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 319, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, ((PyObject *)__pyx_v_self)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 319, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 319, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, ((PyObject *)__pyx_v_self));
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 319, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":318
 * 
 *     @property
 *     def closeness_centrality(self):             # <<<<<<<<<<<<<<
 *         return networkx.closeness_centrality(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.closeness_centrality.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":322
 * 
 *     @property
 *     def degree_centrality(self):             # <<<<<<<<<<<<<<
 *         return networkx.degree_centrality(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_17degree_centrality_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_17degree_centrality_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_17degree_centrality___get__(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_17degree_centrality___get__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "harmat/models/attackgraph.pyx":323
 *     @property
 *     def degree_centrality(self):
 *         return networkx.degree_centrality(self)             # <<<<<<<<<<<<<<
 * 
 *     def initialise_centrality_measure(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_networkx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_degree_centrality); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, ((PyObject *)__pyx_v_self)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, ((PyObject *)__pyx_v_self)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 323, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, ((PyObject *)__pyx_v_self));
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":322
 * 
 *     @property
 *     def degree_centrality(self):             # <<<<<<<<<<<<<<
 *         return networkx.degree_centrality(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.degree_centrality.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":325
 *         return networkx.degree_centrality(self)
 * 
 *     def initialise_centrality_measure(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculates the necessary metrics for visualisation or calculation
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_31initialise_centrality_measure(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6harmat_6models_11attackgraph_11AttackGraph_30initialise_centrality_measure[] = "\n        Calculates the necessary metrics for visualisation or calculation\n        Currently:\n        Risk (top layer and lower layer), Centrality\n        :return:\n        ";
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_31initialise_centrality_measure(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialise_centrality_measure (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_30initialise_centrality_measure(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_30initialise_centrality_measure(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  PyObject *__pyx_v_betweenness = NULL;
  PyObject *__pyx_v_closeness = NULL;
  PyObject *__pyx_v_degree = NULL;
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("initialise_centrality_measure", 0);

  /* "harmat/models/attackgraph.pyx":333
 *         """
 *         # initialise centrality measure
 *         betweenness = self.betweenness_centrality             # <<<<<<<<<<<<<<
 *         closeness = self.closeness_centrality
 *         degree = self.degree_centrality
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_betweenness_centrality); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_betweenness = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "harmat/models/attackgraph.pyx":334
 *         # initialise centrality measure
 *         betweenness = self.betweenness_centrality
 *         closeness = self.closeness_centrality             # <<<<<<<<<<<<<<
 *         degree = self.degree_centrality
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_closeness_centrality); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_closeness = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "harmat/models/attackgraph.pyx":335
 *         betweenness = self.betweenness_centrality
 *         closeness = self.closeness_centrality
 *         degree = self.degree_centrality             # <<<<<<<<<<<<<<
 * 
 *         # initialise host nodes risk metrics and give value for centrality
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_degree_centrality); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_degree = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "harmat/models/attackgraph.pyx":338
 * 
 *         # initialise host nodes risk metrics and give value for centrality
 *         for node in self.nodes():             # <<<<<<<<<<<<<<
 *             node.centrality = (betweenness[node] + closeness[node] + degree[node]) / 3
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nodes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 338, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 338, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 338, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 338, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "harmat/models/attackgraph.pyx":339
 *         # initialise host nodes risk metrics and give value for centrality
 *         for node in self.nodes():
 *             node.centrality = (betweenness[node] + closeness[node] + degree[node]) / 3             # <<<<<<<<<<<<<<
 * 
 *     def number_of_attack_paths(self):
 */
    __pyx_t_1 = PyObject_GetItem(__pyx_v_betweenness, __pyx_v_node); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_GetItem(__pyx_v_closeness, __pyx_v_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyNumber_Add(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetItem(__pyx_v_degree, __pyx_v_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyNumber_Add(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_int_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_node, __pyx_n_s_centrality, __pyx_t_3) < 0) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "harmat/models/attackgraph.pyx":338
 * 
 *         # initialise host nodes risk metrics and give value for centrality
 *         for node in self.nodes():             # <<<<<<<<<<<<<<
 *             node.centrality = (betweenness[node] + closeness[node] + degree[node]) / 3
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "harmat/models/attackgraph.pyx":325
 *         return networkx.degree_centrality(self)
 * 
 *     def initialise_centrality_measure(self):             # <<<<<<<<<<<<<<
 *         """
 *         Calculates the necessary metrics for visualisation or calculation
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.initialise_centrality_measure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_betweenness);
  __Pyx_XDECREF(__pyx_v_closeness);
  __Pyx_XDECREF(__pyx_v_degree);
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":341
 *             node.centrality = (betweenness[node] + closeness[node] + degree[node]) / 3
 * 
 *     def number_of_attack_paths(self):             # <<<<<<<<<<<<<<
 *         if self.all_paths is None:
 *             raise Exception('Attack paths have not been calculated')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_33number_of_attack_paths(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_33number_of_attack_paths(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("number_of_attack_paths (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_32number_of_attack_paths(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_32number_of_attack_paths(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("number_of_attack_paths", 0);

  /* "harmat/models/attackgraph.pyx":342
 * 
 *     def number_of_attack_paths(self):
 *         if self.all_paths is None:             # <<<<<<<<<<<<<<
 *             raise Exception('Attack paths have not been calculated')
 *         return self.cy_all_paths.size()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_all_paths); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "harmat/models/attackgraph.pyx":343
 *     def number_of_attack_paths(self):
 *         if self.all_paths is None:
 *             raise Exception('Attack paths have not been calculated')             # <<<<<<<<<<<<<<
 *         return self.cy_all_paths.size()
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 343, __pyx_L1_error)

    /* "harmat/models/attackgraph.pyx":342
 * 
 *     def number_of_attack_paths(self):
 *         if self.all_paths is None:             # <<<<<<<<<<<<<<
 *             raise Exception('Attack paths have not been calculated')
 *         return self.cy_all_paths.size()
 */
  }

  /* "harmat/models/attackgraph.pyx":344
 *         if self.all_paths is None:
 *             raise Exception('Attack paths have not been calculated')
 *         return self.cy_all_paths.size()             # <<<<<<<<<<<<<<
 * 
 *     def normalised_mean_path_length(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->cy_all_paths.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":341
 *             node.centrality = (betweenness[node] + closeness[node] + degree[node]) / 3
 * 
 *     def number_of_attack_paths(self):             # <<<<<<<<<<<<<<
 *         if self.all_paths is None:
 *             raise Exception('Attack paths have not been calculated')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.number_of_attack_paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":346
 *         return self.cy_all_paths.size()
 * 
 *     def normalised_mean_path_length(self):             # <<<<<<<<<<<<<<
 *         num_paths = self.number_of_attack_paths()
 *         if num_paths == 0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_35normalised_mean_path_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_35normalised_mean_path_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalised_mean_path_length (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_34normalised_mean_path_length(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_34normalised_mean_path_length(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  PyObject *__pyx_v_num_paths = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("normalised_mean_path_length", 0);

  /* "harmat/models/attackgraph.pyx":347
 * 
 *     def normalised_mean_path_length(self):
 *         num_paths = self.number_of_attack_paths()             # <<<<<<<<<<<<<<
 *         if num_paths == 0:
 *             raise ZeroDivisionError('No attack paths')
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_number_of_attack_paths); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_num_paths = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "harmat/models/attackgraph.pyx":348
 *     def normalised_mean_path_length(self):
 *         num_paths = self.number_of_attack_paths()
 *         if num_paths == 0:             # <<<<<<<<<<<<<<
 *             raise ZeroDivisionError('No attack paths')
 *         return self.mean_path_length() / num_paths
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_num_paths, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "harmat/models/attackgraph.pyx":349
 *         num_paths = self.number_of_attack_paths()
 *         if num_paths == 0:
 *             raise ZeroDivisionError('No attack paths')             # <<<<<<<<<<<<<<
 *         return self.mean_path_length() / num_paths
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ZeroDivisionError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 349, __pyx_L1_error)

    /* "harmat/models/attackgraph.pyx":348
 *     def normalised_mean_path_length(self):
 *         num_paths = self.number_of_attack_paths()
 *         if num_paths == 0:             # <<<<<<<<<<<<<<
 *             raise ZeroDivisionError('No attack paths')
 *         return self.mean_path_length() / num_paths
 */
  }

  /* "harmat/models/attackgraph.pyx":350
 *         if num_paths == 0:
 *             raise ZeroDivisionError('No attack paths')
 *         return self.mean_path_length() / num_paths             # <<<<<<<<<<<<<<
 * 
 *     def probability_attack_success(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_mean_path_length); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 350, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_num_paths); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":346
 *         return self.cy_all_paths.size()
 * 
 *     def normalised_mean_path_length(self):             # <<<<<<<<<<<<<<
 *         num_paths = self.number_of_attack_paths()
 *         if num_paths == 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.normalised_mean_path_length", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_num_paths);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":352
 *         return self.mean_path_length() / num_paths
 * 
 *     def probability_attack_success(self):             # <<<<<<<<<<<<<<
 *         self.check_attack_paths()
 *         return max(self.path_probability(path[1:]) for path in self.all_paths)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_37probability_attack_success(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_37probability_attack_success(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("probability_attack_success (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_36probability_attack_success(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_26probability_attack_success_2generator6(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "harmat/models/attackgraph.pyx":354
 *     def probability_attack_success(self):
 *         self.check_attack_paths()
 *         return max(self.path_probability(path[1:]) for path in self.all_paths)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_26probability_attack_success_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr *)__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr(__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 354, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_26probability_attack_success_2generator6, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_probability_attack_success_local, __pyx_n_s_harmat_models_attackgraph); if (unlikely(!gen)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.probability_attack_success.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_26probability_attack_success_2generator6(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 354, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 354, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self), __pyx_n_s_all_paths); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 354, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 354, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 354, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 354, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_path);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_path, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 354, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self), __pyx_n_s_path_probability); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_cur_scope->__pyx_v_path, 1, 0, NULL, NULL, &__pyx_slice__7, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 354, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 354, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":352
 *         return self.mean_path_length() / num_paths
 * 
 *     def probability_attack_success(self):             # <<<<<<<<<<<<<<
 *         self.check_attack_paths()
 *         return max(self.path_probability(path[1:]) for path in self.all_paths)
 */

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_36probability_attack_success(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("probability_attack_success", 0);
  __pyx_cur_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success *)__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success(__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 352, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "harmat/models/attackgraph.pyx":353
 * 
 *     def probability_attack_success(self):
 *         self.check_attack_paths()             # <<<<<<<<<<<<<<
 *         return max(self.path_probability(path[1:]) for path in self.all_paths)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_check_attack_paths); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "harmat/models/attackgraph.pyx":354
 *     def probability_attack_success(self):
 *         self.check_attack_paths()
 *         return max(self.path_probability(path[1:]) for path in self.all_paths)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_26probability_attack_success_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_max, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":352
 *         return self.mean_path_length() / num_paths
 * 
 *     def probability_attack_success(self):             # <<<<<<<<<<<<<<
 *         self.check_attack_paths()
 *         return max(self.path_probability(path[1:]) for path in self.all_paths)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.probability_attack_success", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":357
 * 
 *     @staticmethod
 *     def path_probability(path):             # <<<<<<<<<<<<<<
 *         # return reduce(lambda x, y: x * y, (host.lower_layer.values['probability'] for host in path[1:]))
 *         p = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_39path_probability(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6harmat_6models_11attackgraph_11AttackGraph_39path_probability = {"path_probability", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_39path_probability, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_39path_probability(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_path = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("path_probability (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_path,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "path_probability") < 0)) __PYX_ERR(0, 357, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_path = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("path_probability", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 357, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.path_probability", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_38path_probability(__pyx_v_path);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_38path_probability(PyObject *__pyx_v_path) {
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_host = NULL;
  PyObject *__pyx_v_prob = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("path_probability", 0);

  /* "harmat/models/attackgraph.pyx":359
 *     def path_probability(path):
 *         # return reduce(lambda x, y: x * y, (host.lower_layer.values['probability'] for host in path[1:]))
 *         p = 1             # <<<<<<<<<<<<<<
 *         for host in path[1:]:
 *             prob = host.probability
 */
  __Pyx_INCREF(__pyx_int_1);
  __pyx_v_p = __pyx_int_1;

  /* "harmat/models/attackgraph.pyx":360
 *         # return reduce(lambda x, y: x * y, (host.lower_layer.values['probability'] for host in path[1:]))
 *         p = 1
 *         for host in path[1:]:             # <<<<<<<<<<<<<<
 *             prob = host.probability
 *             if prob == 0:
 */
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_path, 1, 0, NULL, NULL, &__pyx_slice__8, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 360, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 360, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 360, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 360, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_host, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "harmat/models/attackgraph.pyx":361
 *         p = 1
 *         for host in path[1:]:
 *             prob = host.probability             # <<<<<<<<<<<<<<
 *             if prob == 0:
 *                 return 0
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_host, __pyx_n_s_probability); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_prob, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "harmat/models/attackgraph.pyx":362
 *         for host in path[1:]:
 *             prob = host.probability
 *             if prob == 0:             # <<<<<<<<<<<<<<
 *                 return 0
 *             p *= prob
 */
    __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_prob, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_5) {

      /* "harmat/models/attackgraph.pyx":363
 *             prob = host.probability
 *             if prob == 0:
 *                 return 0             # <<<<<<<<<<<<<<
 *             p *= prob
 *         return p
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_int_0);
      __pyx_r = __pyx_int_0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "harmat/models/attackgraph.pyx":362
 *         for host in path[1:]:
 *             prob = host.probability
 *             if prob == 0:             # <<<<<<<<<<<<<<
 *                 return 0
 *             p *= prob
 */
    }

    /* "harmat/models/attackgraph.pyx":364
 *             if prob == 0:
 *                 return 0
 *             p *= prob             # <<<<<<<<<<<<<<
 *         return p
 * 
 */
    __pyx_t_1 = PyNumber_InPlaceMultiply(__pyx_v_p, __pyx_v_prob); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_p, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "harmat/models/attackgraph.pyx":360
 *         # return reduce(lambda x, y: x * y, (host.lower_layer.values['probability'] for host in path[1:]))
 *         p = 1
 *         for host in path[1:]:             # <<<<<<<<<<<<<<
 *             prob = host.probability
 *             if prob == 0:
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "harmat/models/attackgraph.pyx":365
 *                 return 0
 *             p *= prob
 *         return p             # <<<<<<<<<<<<<<
 * 
 *     def all_vulns(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_p);
  __pyx_r = __pyx_v_p;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":357
 * 
 *     @staticmethod
 *     def path_probability(path):             # <<<<<<<<<<<<<<
 *         # return reduce(lambda x, y: x * y, (host.lower_layer.values['probability'] for host in path[1:]))
 *         p = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.path_probability", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_host);
  __Pyx_XDECREF(__pyx_v_prob);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":367
 *         return p
 * 
 *     def all_vulns(self):             # <<<<<<<<<<<<<<
 *         """
 *         :return: A set of all (unique) vulnerabilities
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_41all_vulns(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6harmat_6models_11attackgraph_11AttackGraph_40all_vulns[] = "\n        :return: A set of all (unique) vulnerabilities\n        ";
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_41all_vulns(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("all_vulns (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_40all_vulns(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_9all_vulns_8genexpr7_2generator7(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "harmat/models/attackgraph.pyx":371
 *         :return: A set of all (unique) vulnerabilities
 *         """
 *         return {vul for vul in (node.lower_layer.all_vulns() for node in self.nodes())}             # <<<<<<<<<<<<<<
 * 
 *     def hosts(self):
 */

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_9all_vulns_8genexpr7_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr *)__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr(__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 371, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_9all_vulns_8genexpr7_2generator7, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_all_vulns_locals_genexpr, __pyx_n_s_harmat_models_attackgraph); if (unlikely(!gen)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.all_vulns.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6harmat_6models_11attackgraph_11AttackGraph_9all_vulns_8genexpr7_2generator7(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 371, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 371, __pyx_L1_error) }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self), __pyx_n_s_nodes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 371, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 371, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 371, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 371, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_node);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_node, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_node, __pyx_n_s_lower_layer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_all_vulns); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 371, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":367
 *         return p
 * 
 *     def all_vulns(self):             # <<<<<<<<<<<<<<
 *         """
 *         :return: A set of all (unique) vulnerabilities
 */

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_40all_vulns(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  __Pyx_RefNannySetupContext("all_vulns", 0);
  __pyx_cur_scope = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns *)__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns(__pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 367, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "harmat/models/attackgraph.pyx":371
 *         :return: A set of all (unique) vulnerabilities
 *         """
 *         return {vul for vul in (node.lower_layer.all_vulns() for node in self.nodes())}             # <<<<<<<<<<<<<<
 * 
 *     def hosts(self):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    PyObject *__pyx_8genexpr7__pyx_v_vul = NULL;
    __pyx_t_1 = PySet_New(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_9all_vulns_8genexpr7_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 371, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 371, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 371, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 371, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 371, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr7__pyx_v_vul, __pyx_t_2);
      __pyx_t_2 = 0;
      if (unlikely(PySet_Add(__pyx_t_1, (PyObject*)__pyx_8genexpr7__pyx_v_vul))) __PYX_ERR(0, 371, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_vul);
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_vul);
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":367
 *         return p
 * 
 *     def all_vulns(self):             # <<<<<<<<<<<<<<
 *         """
 *         :return: A set of all (unique) vulnerabilities
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.all_vulns", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":373
 *         return {vul for vul in (node.lower_layer.all_vulns() for node in self.nodes())}
 * 
 *     def hosts(self):             # <<<<<<<<<<<<<<
 *         return filter(lambda x: not isinstance(x, hm.Attacker), self.nodes())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_43hosts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_43hosts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hosts (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_42hosts(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":374
 * 
 *     def hosts(self):
 *         return filter(lambda x: not isinstance(x, hm.Attacker), self.nodes())             # <<<<<<<<<<<<<<
 * 
 *     def num_vulnerable_hosts(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_5hosts_lambda8(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_6harmat_6models_11attackgraph_11AttackGraph_5hosts_lambda8 = {"lambda8", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_5hosts_lambda8, METH_O, 0};
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_5hosts_lambda8(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda8 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda8(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("lambda8", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_hm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Attacker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_x, __pyx_t_2); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong((!(__pyx_t_3 != 0))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.hosts.lambda8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":373
 *         return {vul for vul in (node.lower_layer.all_vulns() for node in self.nodes())}
 * 
 *     def hosts(self):             # <<<<<<<<<<<<<<
 *         return filter(lambda x: not isinstance(x, hm.Attacker), self.nodes())
 * 
 */

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_42hosts(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("hosts", 0);

  /* "harmat/models/attackgraph.pyx":374
 * 
 *     def hosts(self):
 *         return filter(lambda x: not isinstance(x, hm.Attacker), self.nodes())             # <<<<<<<<<<<<<<
 * 
 *     def num_vulnerable_hosts(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6harmat_6models_11attackgraph_11AttackGraph_5hosts_lambda8, 0, __pyx_n_s_hosts_locals_lambda, NULL, __pyx_n_s_harmat_models_attackgraph, __pyx_d, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 374, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_filter, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":373
 *         return {vul for vul in (node.lower_layer.all_vulns() for node in self.nodes())}
 * 
 *     def hosts(self):             # <<<<<<<<<<<<<<
 *         return filter(lambda x: not isinstance(x, hm.Attacker), self.nodes())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.hosts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":376
 *         return filter(lambda x: not isinstance(x, hm.Attacker), self.nodes())
 * 
 *     def num_vulnerable_hosts(self):             # <<<<<<<<<<<<<<
 *         return len(filter_ignorables(list(self.hosts())))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_45num_vulnerable_hosts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_45num_vulnerable_hosts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("num_vulnerable_hosts (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_44num_vulnerable_hosts(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_44num_vulnerable_hosts(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("num_vulnerable_hosts", 0);

  /* "harmat/models/attackgraph.pyx":377
 * 
 *     def num_vulnerable_hosts(self):
 *         return len(filter_ignorables(list(self.hosts())))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_filter_ignorables); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hosts); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 377, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PySequence_List(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":376
 *         return filter(lambda x: not isinstance(x, hm.Attacker), self.nodes())
 * 
 *     def num_vulnerable_hosts(self):             # <<<<<<<<<<<<<<
 *         return len(filter_ignorables(list(self.hosts())))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.num_vulnerable_hosts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":35
 * 
 *     cdef vector[vector[Nptr]] cy_all_paths
 *     cdef public Node source             # <<<<<<<<<<<<<<
 *     cdef public Node target
 *     cdef public object values
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6source_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6source_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6source___get__(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6source___get__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->source));
  __pyx_r = ((PyObject *)__pyx_v_self->source);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6source_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6source_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6source_2__set__(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6source_2__set__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_6harmat_5graph_Node))))) __PYX_ERR(0, 35, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->source);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->source));
  __pyx_v_self->source = ((struct __pyx_obj_6harmat_5graph_Node *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.source.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6source_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6source_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6source_4__del__(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6source_4__del__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->source);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->source));
  __pyx_v_self->source = ((struct __pyx_obj_6harmat_5graph_Node *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":36
 *     cdef vector[vector[Nptr]] cy_all_paths
 *     cdef public Node source
 *     cdef public Node target             # <<<<<<<<<<<<<<
 *     cdef public object values
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6target_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6target_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6target___get__(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6target___get__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->target));
  __pyx_r = ((PyObject *)__pyx_v_self->target);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6target_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6target_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6target_2__set__(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6target_2__set__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_6harmat_5graph_Node))))) __PYX_ERR(0, 36, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->target);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->target));
  __pyx_v_self->target = ((struct __pyx_obj_6harmat_5graph_Node *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("harmat.models.attackgraph.AttackGraph.target.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6target_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6target_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6target_4__del__(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6target_4__del__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->target);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->target));
  __pyx_v_self->target = ((struct __pyx_obj_6harmat_5graph_Node *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":37
 *     cdef public Node source
 *     cdef public Node target
 *     cdef public object values             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6values_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6values_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6values___get__(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6values___get__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->values);
  __pyx_r = __pyx_v_self->values;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6values_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6values_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6values_2__set__(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6values_2__set__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->values);
  __Pyx_DECREF(__pyx_v_self->values);
  __pyx_v_self->values = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6values_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6values_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6values_4__del__(((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6harmat_6models_11attackgraph_11AttackGraph_6values_4__del__(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->values);
  __Pyx_DECREF(__pyx_v_self->values);
  __pyx_v_self->values = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":380
 * 
 * 
 * def filter_ignorables(path):             # <<<<<<<<<<<<<<
 *     return [node for node in path if node.ignorable is False]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_1filter_ignorables(PyObject *__pyx_self, PyObject *__pyx_v_path); /*proto*/
static PyMethodDef __pyx_mdef_6harmat_6models_11attackgraph_1filter_ignorables = {"filter_ignorables", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_1filter_ignorables, METH_O, 0};
static PyObject *__pyx_pw_6harmat_6models_11attackgraph_1filter_ignorables(PyObject *__pyx_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("filter_ignorables (wrapper)", 0);
  __pyx_r = __pyx_pf_6harmat_6models_11attackgraph_filter_ignorables(__pyx_self, ((PyObject *)__pyx_v_path));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6harmat_6models_11attackgraph_filter_ignorables(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("filter_ignorables", 0);

  /* "harmat/models/attackgraph.pyx":381
 * 
 * def filter_ignorables(path):
 *     return [node for node in path if node.ignorable is False]             # <<<<<<<<<<<<<<
 * 
 * cdef bint is_vulnerable(NodeProperty* np) nogil:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_v_path)) || PyTuple_CheckExact(__pyx_v_path)) {
    __pyx_t_2 = __pyx_v_path; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_path); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 381, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 381, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 381, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 381, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 381, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 381, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_ignorable); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = (__pyx_t_5 == Py_False);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_node))) __PYX_ERR(0, 381, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":380
 * 
 * 
 * def filter_ignorables(path):             # <<<<<<<<<<<<<<
 *     return [node for node in path if node.ignorable is False]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("harmat.models.attackgraph.filter_ignorables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":383
 *     return [node for node in path if node.ignorable is False]
 * 
 * cdef bint is_vulnerable(NodeProperty* np) nogil:             # <<<<<<<<<<<<<<
 *     cdef bint rt = False
 *     cdef double p = deref(np).probability
 */

static int __pyx_f_6harmat_6models_11attackgraph_is_vulnerable(struct __pyx_t_6harmat_5graph_NodeProperty *__pyx_v_np) {
  int __pyx_v_rt;
  double __pyx_v_p;
  int __pyx_r;
  double __pyx_t_1;
  int __pyx_t_2;

  /* "harmat/models/attackgraph.pyx":384
 * 
 * cdef bint is_vulnerable(NodeProperty* np) nogil:
 *     cdef bint rt = False             # <<<<<<<<<<<<<<
 *     cdef double p = deref(np).probability
 *     if p != 0:
 */
  __pyx_v_rt = 0;

  /* "harmat/models/attackgraph.pyx":385
 * cdef bint is_vulnerable(NodeProperty* np) nogil:
 *     cdef bint rt = False
 *     cdef double p = deref(np).probability             # <<<<<<<<<<<<<<
 *     if p != 0:
 *         rt = True
 */
  __pyx_t_1 = (*__pyx_v_np).probability;
  __pyx_v_p = __pyx_t_1;

  /* "harmat/models/attackgraph.pyx":386
 *     cdef bint rt = False
 *     cdef double p = deref(np).probability
 *     if p != 0:             # <<<<<<<<<<<<<<
 *         rt = True
 *     return rt
 */
  __pyx_t_2 = ((__pyx_v_p != 0.0) != 0);
  if (__pyx_t_2) {

    /* "harmat/models/attackgraph.pyx":387
 *     cdef double p = deref(np).probability
 *     if p != 0:
 *         rt = True             # <<<<<<<<<<<<<<
 *     return rt
 * 
 */
    __pyx_v_rt = 1;

    /* "harmat/models/attackgraph.pyx":386
 *     cdef bint rt = False
 *     cdef double p = deref(np).probability
 *     if p != 0:             # <<<<<<<<<<<<<<
 *         rt = True
 *     return rt
 */
  }

  /* "harmat/models/attackgraph.pyx":388
 *     if p != 0:
 *         rt = True
 *     return rt             # <<<<<<<<<<<<<<
 * 
 * @cython.wraparound(False)
 */
  __pyx_r = __pyx_v_rt;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":383
 *     return [node for node in path if node.ignorable is False]
 * 
 * cdef bint is_vulnerable(NodeProperty* np) nogil:             # <<<<<<<<<<<<<<
 *     cdef bint rt = False
 *     cdef double p = deref(np).probability
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":392
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef vector[vector[Nptr]] find_attack_paths(AttackGraph G, NodeProperty* source, vector[Nptr] targets):             # <<<<<<<<<<<<<<
 *     cdef vector[vector[Nptr]] all_paths
 *     cdef vector[vector[Nptr]] new_paths
 */

static std::vector<std::vector<__pyx_t_6harmat_5graph_Nptr> >  __pyx_f_6harmat_6models_11attackgraph_find_attack_paths(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_G, struct __pyx_t_6harmat_5graph_NodeProperty *__pyx_v_source, std::vector<__pyx_t_6harmat_5graph_Nptr>  __pyx_v_targets) {
  std::vector<std::vector<__pyx_t_6harmat_5graph_Nptr> >  __pyx_v_all_paths;
  std::vector<std::vector<__pyx_t_6harmat_5graph_Nptr> >  __pyx_v_new_paths;
  std::vector<std::vector<__pyx_t_6harmat_5graph_Nptr> > ::iterator __pyx_v_paths_it;
  std::vector<struct __pyx_t_6harmat_5graph_NodeProperty *> ::iterator __pyx_v_targets_it;
  std::vector<std::vector<__pyx_t_6harmat_5graph_Nptr> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("find_attack_paths", 0);

  /* "harmat/models/attackgraph.pyx":396
 *     cdef vector[vector[Nptr]] new_paths
 *     cdef vector[vector[Nptr]].iterator paths_it
 *     cdef vector[NodeProperty*].iterator targets_it = targets.begin()             # <<<<<<<<<<<<<<
 *     while targets_it != targets.end():
 *         new_paths = all_simple_attack_paths(G, source, deref(targets_it))
 */
  __pyx_v_targets_it = __pyx_v_targets.begin();

  /* "harmat/models/attackgraph.pyx":397
 *     cdef vector[vector[Nptr]].iterator paths_it
 *     cdef vector[NodeProperty*].iterator targets_it = targets.begin()
 *     while targets_it != targets.end():             # <<<<<<<<<<<<<<
 *         new_paths = all_simple_attack_paths(G, source, deref(targets_it))
 *         paths_it = new_paths.begin()
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_targets_it != __pyx_v_targets.end()) != 0);
    if (!__pyx_t_1) break;

    /* "harmat/models/attackgraph.pyx":398
 *     cdef vector[NodeProperty*].iterator targets_it = targets.begin()
 *     while targets_it != targets.end():
 *         new_paths = all_simple_attack_paths(G, source, deref(targets_it))             # <<<<<<<<<<<<<<
 *         paths_it = new_paths.begin()
 *         while paths_it != new_paths.end():
 */
    __pyx_v_new_paths = __pyx_f_6harmat_6models_11attackgraph_all_simple_attack_paths(__pyx_v_G, __pyx_v_source, (*__pyx_v_targets_it));

    /* "harmat/models/attackgraph.pyx":399
 *     while targets_it != targets.end():
 *         new_paths = all_simple_attack_paths(G, source, deref(targets_it))
 *         paths_it = new_paths.begin()             # <<<<<<<<<<<<<<
 *         while paths_it != new_paths.end():
 *             all_paths.push_back(deref(paths_it))
 */
    __pyx_v_paths_it = __pyx_v_new_paths.begin();

    /* "harmat/models/attackgraph.pyx":400
 *         new_paths = all_simple_attack_paths(G, source, deref(targets_it))
 *         paths_it = new_paths.begin()
 *         while paths_it != new_paths.end():             # <<<<<<<<<<<<<<
 *             all_paths.push_back(deref(paths_it))
 *             inc(paths_it)
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_paths_it != __pyx_v_new_paths.end()) != 0);
      if (!__pyx_t_1) break;

      /* "harmat/models/attackgraph.pyx":401
 *         paths_it = new_paths.begin()
 *         while paths_it != new_paths.end():
 *             all_paths.push_back(deref(paths_it))             # <<<<<<<<<<<<<<
 *             inc(paths_it)
 *         inc(targets_it)
 */
      try {
        __pyx_v_all_paths.push_back((*__pyx_v_paths_it));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 401, __pyx_L1_error)
      }

      /* "harmat/models/attackgraph.pyx":402
 *         while paths_it != new_paths.end():
 *             all_paths.push_back(deref(paths_it))
 *             inc(paths_it)             # <<<<<<<<<<<<<<
 *         inc(targets_it)
 *     return all_paths
 */
      (++__pyx_v_paths_it);
    }

    /* "harmat/models/attackgraph.pyx":403
 *             all_paths.push_back(deref(paths_it))
 *             inc(paths_it)
 *         inc(targets_it)             # <<<<<<<<<<<<<<
 *     return all_paths
 * 
 */
    (++__pyx_v_targets_it);
  }

  /* "harmat/models/attackgraph.pyx":404
 *             inc(paths_it)
 *         inc(targets_it)
 *     return all_paths             # <<<<<<<<<<<<<<
 * 
 * import time
 */
  __pyx_r = __pyx_v_all_paths;
  goto __pyx_L0;

  /* "harmat/models/attackgraph.pyx":392
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef vector[vector[Nptr]] find_attack_paths(AttackGraph G, NodeProperty* source, vector[Nptr] targets):             # <<<<<<<<<<<<<<
 *     cdef vector[vector[Nptr]] all_paths
 *     cdef vector[vector[Nptr]] new_paths
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("harmat.models.attackgraph.find_attack_paths", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "harmat/models/attackgraph.pyx":412
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef vector[vector[Nptr]] all_simple_attack_paths(AttackGraph G, NodeProperty* source, NodeProperty* target) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Modified and cythonized version of NetworkX _all_simple_paths_graph
 */

static std::vector<std::vector<__pyx_t_6harmat_5graph_Nptr> >  __pyx_f_6harmat_6models_11attackgraph_all_simple_attack_paths(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *__pyx_v_G, struct __pyx_t_6harmat_5graph_NodeProperty *__pyx_v_source, struct __pyx_t_6harmat_5graph_NodeProperty *__pyx_v_target) {
  harmat::Graph<struct __pyx_t_6harmat_5graph_NodeProperty>  __pyx_v_graph_ptr;
  uint32_t __pyx_v_num_nodes;
  std::vector<std::vector<__pyx_t_6harmat_5graph_Nptr> >  __pyx_v_paths;
  uint32_t __pyx_v_cutoff;
  std::vector<__pyx_t_6harmat_5graph_Nptr>  __pyx_v_visited;
  std::vector<std::pair<__pyx_t_6harmat_6models_11attackgraph_vit,__pyx_t_6harmat_6models_11attackgraph_vit> >  __pyx_v_stack;
  std::unordered_set<struct __pyx_t_6harmat_5graph_NodeProperty *>  __pyx_v_traversed;
  std::vector<struct __pyx_t_6harmat_5graph_NodeProperty *>  __pyx_v_new_path;
  struct __pyx_t_6harmat_5graph_NodeProperty *__pyx_v_child;
  __pyx_t_6harmat_6models_11attackgraph_vit *__pyx_v_children;
  __pyx_t_6harmat_6models_11attackgraph_vit *__pyx_v_children_end;
  std::vector<__pyx_t_6harmat_5graph_Nptr>  __pyx_v_out_nodes;
  std::pair<__pyx_t_6harmat_6models_11attackgraph_vit,__pyx_t_6harmat_6models_11attackgraph_vit>  __pyx_v_ppair;
  std::vector<std::vector<__pyx_t_6harmat_5graph_Nptr> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::vector<__pyx_t_6harmat_5graph_Nptr>  __pyx_t_2;
  int __pyx_t_3;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("all_simple_attack_paths", 0);
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif

  /* "harmat/models/attackgraph.pyx":413
 * @cython.boundscheck(False)
 * cdef vector[vector[Nptr]] all_simple_attack_paths(AttackGraph G, NodeProperty* source, NodeProperty* target) nogil:
 *     """             # <<<<<<<<<<<<<<
 *     Modified and cythonized version of NetworkX _all_simple_paths_graph
 *     Notably, this ignores hosts with no vulnerabilities and ignores ignorable set hosts.
 */
  /*try:*/ {

    /* "harmat/models/attackgraph.pyx":424
 *     """
 *     cdef Graph[NodeProperty] graph_ptr
 *     with gil:             # <<<<<<<<<<<<<<
 *         graph_ptr = deref(G.graph_ptr)
 *     cdef uint32_t num_nodes = graph_ptr.num_vertices()
 */
    {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        /*try:*/ {

          /* "harmat/models/attackgraph.pyx":425
 *     cdef Graph[NodeProperty] graph_ptr
 *     with gil:
 *         graph_ptr = deref(G.graph_ptr)             # <<<<<<<<<<<<<<
 *     cdef uint32_t num_nodes = graph_ptr.num_vertices()
 *     cdef vector[vector[Nptr]] paths
 */
          __pyx_v_graph_ptr = (*__pyx_v_G->__pyx_base.graph_ptr);
        }

        /* "harmat/models/attackgraph.pyx":424
 *     """
 *     cdef Graph[NodeProperty] graph_ptr
 *     with gil:             # <<<<<<<<<<<<<<
 *         graph_ptr = deref(G.graph_ptr)
 *     cdef uint32_t num_nodes = graph_ptr.num_vertices()
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            goto __pyx_L8;
          }
          __pyx_L8:;
        }
    }

    /* "harmat/models/attackgraph.pyx":426
 *     with gil:
 *         graph_ptr = deref(G.graph_ptr)
 *     cdef uint32_t num_nodes = graph_ptr.num_vertices()             # <<<<<<<<<<<<<<
 *     cdef vector[vector[Nptr]] paths
 *     cdef uint32_t cutoff = num_nodes - 1
 */
    __pyx_v_num_nodes = __pyx_v_graph_ptr.num_vertices();

    /* "harmat/models/attackgraph.pyx":428
 *     cdef uint32_t num_nodes = graph_ptr.num_vertices()
 *     cdef vector[vector[Nptr]] paths
 *     cdef uint32_t cutoff = num_nodes - 1             # <<<<<<<<<<<<<<
 *     cdef vector[Nptr] visited
 *     cdef vector[pair[vit, vit]] stack
 */
    __pyx_v_cutoff = (__pyx_v_num_nodes - 1);

    /* "harmat/models/attackgraph.pyx":436
 *     cdef vit* children
 *     cdef vit* children_end
 *     cdef vector[Nptr] out_nodes = graph_ptr.out_nodes(source)             # <<<<<<<<<<<<<<
 *     cdef pair[vit, vit] ppair
 *     if num_nodes < 2:
 */
    __pyx_v_out_nodes = __pyx_v_graph_ptr.out_nodes(__pyx_v_source);

    /* "harmat/models/attackgraph.pyx":438
 *     cdef vector[Nptr] out_nodes = graph_ptr.out_nodes(source)
 *     cdef pair[vit, vit] ppair
 *     if num_nodes < 2:             # <<<<<<<<<<<<<<
 *         return paths
 *     visited.push_back(source)
 */
    __pyx_t_1 = ((__pyx_v_num_nodes < 2) != 0);
    if (__pyx_t_1) {

      /* "harmat/models/attackgraph.pyx":439
 *     cdef pair[vit, vit] ppair
 *     if num_nodes < 2:
 *         return paths             # <<<<<<<<<<<<<<
 *     visited.push_back(source)
 *     traversed.insert(source)
 */
      __pyx_r = __pyx_v_paths;
      goto __pyx_L3_return;

      /* "harmat/models/attackgraph.pyx":438
 *     cdef vector[Nptr] out_nodes = graph_ptr.out_nodes(source)
 *     cdef pair[vit, vit] ppair
 *     if num_nodes < 2:             # <<<<<<<<<<<<<<
 *         return paths
 *     visited.push_back(source)
 */
    }

    /* "harmat/models/attackgraph.pyx":440
 *     if num_nodes < 2:
 *         return paths
 *     visited.push_back(source)             # <<<<<<<<<<<<<<
 *     traversed.insert(source)
 *     ppair.first = out_nodes.begin()
 */
    try {
      __pyx_v_visited.push_back(__pyx_v_source);
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 440, __pyx_L4_error)
    }

    /* "harmat/models/attackgraph.pyx":441
 *         return paths
 *     visited.push_back(source)
 *     traversed.insert(source)             # <<<<<<<<<<<<<<
 *     ppair.first = out_nodes.begin()
 *     ppair.second = out_nodes.end()
 */
    __pyx_v_traversed.insert(__pyx_v_source);

    /* "harmat/models/attackgraph.pyx":442
 *     visited.push_back(source)
 *     traversed.insert(source)
 *     ppair.first = out_nodes.begin()             # <<<<<<<<<<<<<<
 *     ppair.second = out_nodes.end()
 *     stack.push_back(ppair)
 */
    __pyx_v_ppair.first = __pyx_v_out_nodes.begin();

    /* "harmat/models/attackgraph.pyx":443
 *     traversed.insert(source)
 *     ppair.first = out_nodes.begin()
 *     ppair.second = out_nodes.end()             # <<<<<<<<<<<<<<
 *     stack.push_back(ppair)
 *     while stack.empty() == False:
 */
    __pyx_v_ppair.second = __pyx_v_out_nodes.end();

    /* "harmat/models/attackgraph.pyx":444
 *     ppair.first = out_nodes.begin()
 *     ppair.second = out_nodes.end()
 *     stack.push_back(ppair)             # <<<<<<<<<<<<<<
 *     while stack.empty() == False:
 *         children = &(stack.back().first)
 */
    try {
      __pyx_v_stack.push_back(__pyx_v_ppair);
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 444, __pyx_L4_error)
    }

    /* "harmat/models/attackgraph.pyx":445
 *     ppair.second = out_nodes.end()
 *     stack.push_back(ppair)
 *     while stack.empty() == False:             # <<<<<<<<<<<<<<
 *         children = &(stack.back().first)
 *         children_end = &(stack.back().second)
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_stack.empty() == 0) != 0);
      if (!__pyx_t_1) break;

      /* "harmat/models/attackgraph.pyx":446
 *     stack.push_back(ppair)
 *     while stack.empty() == False:
 *         children = &(stack.back().first)             # <<<<<<<<<<<<<<
 *         children_end = &(stack.back().second)
 *         child = deref(deref(children))
 */
      __pyx_v_children = (&__pyx_v_stack.back().first);

      /* "harmat/models/attackgraph.pyx":447
 *     while stack.empty() == False:
 *         children = &(stack.back().first)
 *         children_end = &(stack.back().second)             # <<<<<<<<<<<<<<
 *         child = deref(deref(children))
 *         if deref(children) == deref(children_end):
 */
      __pyx_v_children_end = (&__pyx_v_stack.back().second);

      /* "harmat/models/attackgraph.pyx":448
 *         children = &(stack.back().first)
 *         children_end = &(stack.back().second)
 *         child = deref(deref(children))             # <<<<<<<<<<<<<<
 *         if deref(children) == deref(children_end):
 *             stack.pop_back()
 */
      __pyx_v_child = (*(*__pyx_v_children));

      /* "harmat/models/attackgraph.pyx":449
 *         children_end = &(stack.back().second)
 *         child = deref(deref(children))
 *         if deref(children) == deref(children_end):             # <<<<<<<<<<<<<<
 *             stack.pop_back()
 *             visited.pop_back()
 */
      __pyx_t_1 = (((*__pyx_v_children) == (*__pyx_v_children_end)) != 0);
      if (__pyx_t_1) {

        /* "harmat/models/attackgraph.pyx":450
 *         child = deref(deref(children))
 *         if deref(children) == deref(children_end):
 *             stack.pop_back()             # <<<<<<<<<<<<<<
 *             visited.pop_back()
 *         elif traversed.size() < cutoff:
 */
        __pyx_v_stack.pop_back();

        /* "harmat/models/attackgraph.pyx":451
 *         if deref(children) == deref(children_end):
 *             stack.pop_back()
 *             visited.pop_back()             # <<<<<<<<<<<<<<
 *         elif traversed.size() < cutoff:
 *             inc(deref(children))
 */
        __pyx_v_visited.pop_back();

        /* "harmat/models/attackgraph.pyx":449
 *         children_end = &(stack.back().second)
 *         child = deref(deref(children))
 *         if deref(children) == deref(children_end):             # <<<<<<<<<<<<<<
 *             stack.pop_back()
 *             visited.pop_back()
 */
        goto __pyx_L12;
      }

      /* "harmat/models/attackgraph.pyx":452
 *             stack.pop_back()
 *             visited.pop_back()
 *         elif traversed.size() < cutoff:             # <<<<<<<<<<<<<<
 *             inc(deref(children))
 *             if child == target:
 */
      __pyx_t_1 = ((__pyx_v_traversed.size() < __pyx_v_cutoff) != 0);
      if (__pyx_t_1) {

        /* "harmat/models/attackgraph.pyx":453
 *             visited.pop_back()
 *         elif traversed.size() < cutoff:
 *             inc(deref(children))             # <<<<<<<<<<<<<<
 *             if child == target:
 *                 new_path = vector[Nptr](visited)
 */
        (++(*__pyx_v_children));

        /* "harmat/models/attackgraph.pyx":454
 *         elif traversed.size() < cutoff:
 *             inc(deref(children))
 *             if child == target:             # <<<<<<<<<<<<<<
 *                 new_path = vector[Nptr](visited)
 *                 new_path.push_back(target)
 */
        __pyx_t_1 = ((__pyx_v_child == __pyx_v_target) != 0);
        if (__pyx_t_1) {

          /* "harmat/models/attackgraph.pyx":455
 *             inc(deref(children))
 *             if child == target:
 *                 new_path = vector[Nptr](visited)             # <<<<<<<<<<<<<<
 *                 new_path.push_back(target)
 *                 paths.push_back(new_path)
 */
          try {
            __pyx_t_2 = std::vector<__pyx_t_6harmat_5graph_Nptr> (__pyx_v_visited);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 455, __pyx_L4_error)
          }
          __pyx_v_new_path = __pyx_t_2;

          /* "harmat/models/attackgraph.pyx":456
 *             if child == target:
 *                 new_path = vector[Nptr](visited)
 *                 new_path.push_back(target)             # <<<<<<<<<<<<<<
 *                 paths.push_back(new_path)
 *             elif traversed.find(child) == traversed.end() and (child.ignorable == True or is_vulnerable(child)):
 */
          try {
            __pyx_v_new_path.push_back(__pyx_v_target);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 456, __pyx_L4_error)
          }

          /* "harmat/models/attackgraph.pyx":457
 *                 new_path = vector[Nptr](visited)
 *                 new_path.push_back(target)
 *                 paths.push_back(new_path)             # <<<<<<<<<<<<<<
 *             elif traversed.find(child) == traversed.end() and (child.ignorable == True or is_vulnerable(child)):
 *                 visited.push_back(child)
 */
          try {
            __pyx_v_paths.push_back(__pyx_v_new_path);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 457, __pyx_L4_error)
          }

          /* "harmat/models/attackgraph.pyx":454
 *         elif traversed.size() < cutoff:
 *             inc(deref(children))
 *             if child == target:             # <<<<<<<<<<<<<<
 *                 new_path = vector[Nptr](visited)
 *                 new_path.push_back(target)
 */
          goto __pyx_L13;
        }

        /* "harmat/models/attackgraph.pyx":458
 *                 new_path.push_back(target)
 *                 paths.push_back(new_path)
 *             elif traversed.find(child) == traversed.end() and (child.ignorable == True or is_vulnerable(child)):             # <<<<<<<<<<<<<<
 *                 visited.push_back(child)
 *                 traversed.insert(child)
 */
        __pyx_t_3 = ((__pyx_v_traversed.find(__pyx_v_child) == __pyx_v_traversed.end()) != 0);
        if (__pyx_t_3) {
        } else {
          __pyx_t_1 = __pyx_t_3;
          goto __pyx_L14_bool_binop_done;
        }
        __pyx_t_3 = ((__pyx_v_child->ignorable == 1) != 0);
        if (!__pyx_t_3) {
        } else {
          __pyx_t_1 = __pyx_t_3;
          goto __pyx_L14_bool_binop_done;
        }
        __pyx_t_3 = (__pyx_f_6harmat_6models_11attackgraph_is_vulnerable(__pyx_v_child) != 0);
        __pyx_t_1 = __pyx_t_3;
        __pyx_L14_bool_binop_done:;
        if (__pyx_t_1) {

          /* "harmat/models/attackgraph.pyx":459
 *                 paths.push_back(new_path)
 *             elif traversed.find(child) == traversed.end() and (child.ignorable == True or is_vulnerable(child)):
 *                 visited.push_back(child)             # <<<<<<<<<<<<<<
 *                 traversed.insert(child)
 *                 out_nodes = graph_ptr.out_nodes(child)
 */
          try {
            __pyx_v_visited.push_back(__pyx_v_child);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 459, __pyx_L4_error)
          }

          /* "harmat/models/attackgraph.pyx":460
 *             elif traversed.find(child) == traversed.end() and (child.ignorable == True or is_vulnerable(child)):
 *                 visited.push_back(child)
 *                 traversed.insert(child)             # <<<<<<<<<<<<<<
 *                 out_nodes = graph_ptr.out_nodes(child)
 *                 ppair.first = out_nodes.begin()
 */
          __pyx_v_traversed.insert(__pyx_v_child);

          /* "harmat/models/attackgraph.pyx":461
 *                 visited.push_back(child)
 *                 traversed.insert(child)
 *                 out_nodes = graph_ptr.out_nodes(child)             # <<<<<<<<<<<<<<
 *                 ppair.first = out_nodes.begin()
 *                 ppair.second = out_nodes.end()
 */
          __pyx_v_out_nodes = __pyx_v_graph_ptr.out_nodes(__pyx_v_child);

          /* "harmat/models/attackgraph.pyx":462
 *                 traversed.insert(child)
 *                 out_nodes = graph_ptr.out_nodes(child)
 *                 ppair.first = out_nodes.begin()             # <<<<<<<<<<<<<<
 *                 ppair.second = out_nodes.end()
 *                 stack.push_back(ppair)
 */
          __pyx_v_ppair.first = __pyx_v_out_nodes.begin();

          /* "harmat/models/attackgraph.pyx":463
 *                 out_nodes = graph_ptr.out_nodes(child)
 *                 ppair.first = out_nodes.begin()
 *                 ppair.second = out_nodes.end()             # <<<<<<<<<<<<<<
 *                 stack.push_back(ppair)
 *         else:
 */
          __pyx_v_ppair.second = __pyx_v_out_nodes.end();

          /* "harmat/models/attackgraph.pyx":464
 *                 ppair.first = out_nodes.begin()
 *                 ppair.second = out_nodes.end()
 *                 stack.push_back(ppair)             # <<<<<<<<<<<<<<
 *         else:
 *             if child == target or traversed.find(child) == traversed.end():
 */
          try {
            __pyx_v_stack.push_back(__pyx_v_ppair);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 464, __pyx_L4_error)
          }

          /* "harmat/models/attackgraph.pyx":458
 *                 new_path.push_back(target)
 *                 paths.push_back(new_path)
 *             elif traversed.find(child) == traversed.end() and (child.ignorable == True or is_vulnerable(child)):             # <<<<<<<<<<<<<<
 *                 visited.push_back(child)
 *                 traversed.insert(child)
 */
        }
        __pyx_L13:;

        /* "harmat/models/attackgraph.pyx":452
 *             stack.pop_back()
 *             visited.pop_back()
 *         elif traversed.size() < cutoff:             # <<<<<<<<<<<<<<
 *             inc(deref(children))
 *             if child == target:
 */
        goto __pyx_L12;
      }

      /* "harmat/models/attackgraph.pyx":466
 *                 stack.push_back(ppair)
 *         else:
 *             if child == target or traversed.find(child) == traversed.end():             # <<<<<<<<<<<<<<
 *                 new_path = vector[Nptr](visited)
 *                 new_path.push_back(target)
 */
      /*else*/ {
        __pyx_t_3 = ((__pyx_v_child == __pyx_v_target) != 0);
        if (!__pyx_t_3) {
        } else {
          __pyx_t_1 = __pyx_t_3;
          goto __pyx_L18_bool_binop_done;
        }
        __pyx_t_3 = ((__pyx_v_traversed.find(__pyx_v_child) == __pyx_v_traversed.end()) != 0);
        __pyx_t_1 = __pyx_t_3;
        __pyx_L18_bool_binop_done:;
        if (__pyx_t_1) {

          /* "harmat/models/attackgraph.pyx":467
 *         else:
 *             if child == target or traversed.find(child) == traversed.end():
 *                 new_path = vector[Nptr](visited)             # <<<<<<<<<<<<<<
 *                 new_path.push_back(target)
 *                 paths.push_back(new_path)
 */
          try {
            __pyx_t_2 = std::vector<__pyx_t_6harmat_5graph_Nptr> (__pyx_v_visited);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 467, __pyx_L4_error)
          }
          __pyx_v_new_path = __pyx_t_2;

          /* "harmat/models/attackgraph.pyx":468
 *             if child == target or traversed.find(child) == traversed.end():
 *                 new_path = vector[Nptr](visited)
 *                 new_path.push_back(target)             # <<<<<<<<<<<<<<
 *                 paths.push_back(new_path)
 *             stack.pop_back()
 */
          try {
            __pyx_v_new_path.push_back(__pyx_v_target);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 468, __pyx_L4_error)
          }

          /* "harmat/models/attackgraph.pyx":469
 *                 new_path = vector[Nptr](visited)
 *                 new_path.push_back(target)
 *                 paths.push_back(new_path)             # <<<<<<<<<<<<<<
 *             stack.pop_back()
 *             visited.pop_back()
 */
          try {
            __pyx_v_paths.push_back(__pyx_v_new_path);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 469, __pyx_L4_error)
          }

          /* "harmat/models/attackgraph.pyx":466
 *                 stack.push_back(ppair)
 *         else:
 *             if child == target or traversed.find(child) == traversed.end():             # <<<<<<<<<<<<<<
 *                 new_path = vector[Nptr](visited)
 *                 new_path.push_back(target)
 */
        }

        /* "harmat/models/attackgraph.pyx":470
 *                 new_path.push_back(target)
 *                 paths.push_back(new_path)
 *             stack.pop_back()             # <<<<<<<<<<<<<<
 *             visited.pop_back()
 *     return paths
 */
        __pyx_v_stack.pop_back();

        /* "harmat/models/attackgraph.pyx":471
 *                 paths.push_back(new_path)
 *             stack.pop_back()
 *             visited.pop_back()             # <<<<<<<<<<<<<<
 *     return paths
 */
        __pyx_v_visited.pop_back();
      }
      __pyx_L12:;
    }

    /* "harmat/models/attackgraph.pyx":472
 *             stack.pop_back()
 *             visited.pop_back()
 *     return paths             # <<<<<<<<<<<<<<
 */
    __pyx_r = __pyx_v_paths;
    goto __pyx_L3_return;
  }

  /* "harmat/models/attackgraph.pyx":413
 * @cython.boundscheck(False)
 * cdef vector[vector[Nptr]] all_simple_attack_paths(AttackGraph G, NodeProperty* source, NodeProperty* target) nogil:
 *     """             # <<<<<<<<<<<<<<
 *     Modified and cythonized version of NetworkX _all_simple_paths_graph
 *     Notably, this ignores hosts with no vulnerabilities and ignores ignorable set hosts.
 */
  /*finally:*/ {
    __pyx_L3_return: {
      #ifdef WITH_THREAD
      __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      goto __pyx_L0;
    }
    __pyx_L4_error: {
      #ifdef WITH_THREAD
      __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      goto __pyx_L1_error;
    }
  }

  /* "harmat/models/attackgraph.pyx":412
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef vector[vector[Nptr]] all_simple_attack_paths(AttackGraph G, NodeProperty* source, NodeProperty* target) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Modified and cythonized version of NetworkX _all_simple_paths_graph
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("harmat.models.attackgraph.all_simple_attack_paths", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}
static struct __pyx_vtabstruct_6harmat_6models_11attackgraph_AttackGraph __pyx_vtable_6harmat_6models_11attackgraph_AttackGraph;

static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph_AttackGraph(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *p;
  PyObject *o = __pyx_ptype_6harmat_5graph_HarmatGraph->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6harmat_5graph_HarmatGraph*)__pyx_vtabptr_6harmat_6models_11attackgraph_AttackGraph;
  new((void*)&(p->cy_all_paths)) std::vector<std::vector<__pyx_t_6harmat_5graph_Nptr> > ();
  p->source = ((struct __pyx_obj_6harmat_5graph_Node *)Py_None); Py_INCREF(Py_None);
  p->target = ((struct __pyx_obj_6harmat_5graph_Node *)Py_None); Py_INCREF(Py_None);
  p->values = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6harmat_6models_11attackgraph_AttackGraph(PyObject *o) {
  struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *p = (struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->cy_all_paths);
  Py_CLEAR(p->source);
  Py_CLEAR(p->target);
  Py_CLEAR(p->values);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6harmat_5graph_HarmatGraph)) __pyx_ptype_6harmat_5graph_HarmatGraph->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6harmat_6models_11attackgraph_AttackGraph);
}

static int __pyx_tp_traverse_6harmat_6models_11attackgraph_AttackGraph(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *p = (struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)o;
  e = ((likely(__pyx_ptype_6harmat_5graph_HarmatGraph)) ? ((__pyx_ptype_6harmat_5graph_HarmatGraph->tp_traverse) ? __pyx_ptype_6harmat_5graph_HarmatGraph->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6harmat_6models_11attackgraph_AttackGraph)); if (e) return e;
  if (p->source) {
    e = (*v)(((PyObject*)p->source), a); if (e) return e;
  }
  if (p->target) {
    e = (*v)(((PyObject*)p->target), a); if (e) return e;
  }
  if (p->values) {
    e = (*v)(p->values, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6harmat_6models_11attackgraph_AttackGraph(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *p = (struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)o;
  if (likely(__pyx_ptype_6harmat_5graph_HarmatGraph)) { if (__pyx_ptype_6harmat_5graph_HarmatGraph->tp_clear) __pyx_ptype_6harmat_5graph_HarmatGraph->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6harmat_6models_11attackgraph_AttackGraph);
  tmp = ((PyObject*)p->source);
  p->source = ((struct __pyx_obj_6harmat_5graph_Node *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->target);
  p->target = ((struct __pyx_obj_6harmat_5graph_Node *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->values);
  p->values = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6harmat_6models_11attackgraph_11AttackGraph_impact(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6impact_1__get__(o);
}

static PyObject *__pyx_getprop_6harmat_6models_11attackgraph_11AttackGraph_all_paths(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_9all_paths_1__get__(o);
}

static PyObject *__pyx_getprop_6harmat_6models_11attackgraph_11AttackGraph_risk(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_4risk_1__get__(o);
}

static PyObject *__pyx_getprop_6harmat_6models_11attackgraph_11AttackGraph_cost(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_4cost_1__get__(o);
}

static PyObject *__pyx_getprop_6harmat_6models_11attackgraph_11AttackGraph_betweenness_centrality(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_22betweenness_centrality_1__get__(o);
}

static PyObject *__pyx_getprop_6harmat_6models_11attackgraph_11AttackGraph_closeness_centrality(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_20closeness_centrality_1__get__(o);
}

static PyObject *__pyx_getprop_6harmat_6models_11attackgraph_11AttackGraph_degree_centrality(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_17degree_centrality_1__get__(o);
}

static PyObject *__pyx_getprop_6harmat_6models_11attackgraph_11AttackGraph_source(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6source_1__get__(o);
}

static int __pyx_setprop_6harmat_6models_11attackgraph_11AttackGraph_source(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6source_3__set__(o, v);
  }
  else {
    return __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6source_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6harmat_6models_11attackgraph_11AttackGraph_target(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6target_1__get__(o);
}

static int __pyx_setprop_6harmat_6models_11attackgraph_11AttackGraph_target(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6target_3__set__(o, v);
  }
  else {
    return __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6target_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6harmat_6models_11attackgraph_11AttackGraph_values(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6values_1__get__(o);
}

static int __pyx_setprop_6harmat_6models_11attackgraph_11AttackGraph_values(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6values_3__set__(o, v);
  }
  else {
    return __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_6values_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_6harmat_6models_11attackgraph_AttackGraph[] = {
  {"find_paths", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_7find_paths, METH_NOARGS, __pyx_doc_6harmat_6models_11attackgraph_11AttackGraph_6find_paths},
  {"flowup", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_9flowup, METH_NOARGS, 0},
  {"path_impact", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_11path_impact, METH_VARARGS|METH_KEYWORDS, 0},
  {"check_attack_paths", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_13check_attack_paths, METH_NOARGS, 0},
  {"return_on_attack", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_15return_on_attack, METH_NOARGS, __pyx_doc_6harmat_6models_11attackgraph_11AttackGraph_14return_on_attack},
  {"path_return", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_17path_return, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6harmat_6models_11attackgraph_11AttackGraph_16path_return},
  {"mean_path_length", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_19mean_path_length, METH_NOARGS, __pyx_doc_6harmat_6models_11attackgraph_11AttackGraph_18mean_path_length},
  {"mode_path_length", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_21mode_path_length, METH_NOARGS, __pyx_doc_6harmat_6models_11attackgraph_11AttackGraph_20mode_path_length},
  {"stdev_path_length", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_23stdev_path_length, METH_NOARGS, __pyx_doc_6harmat_6models_11attackgraph_11AttackGraph_22stdev_path_length},
  {"shortest_path_length", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_25shortest_path_length, METH_NOARGS, 0},
  {"add_edge_between", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_27add_edge_between, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6harmat_6models_11attackgraph_11AttackGraph_26add_edge_between},
  {"find_node", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_29find_node, METH_O, __pyx_doc_6harmat_6models_11attackgraph_11AttackGraph_28find_node},
  {"initialise_centrality_measure", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_31initialise_centrality_measure, METH_NOARGS, __pyx_doc_6harmat_6models_11attackgraph_11AttackGraph_30initialise_centrality_measure},
  {"number_of_attack_paths", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_33number_of_attack_paths, METH_NOARGS, 0},
  {"normalised_mean_path_length", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_35normalised_mean_path_length, METH_NOARGS, 0},
  {"probability_attack_success", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_37probability_attack_success, METH_NOARGS, 0},
  {"path_probability", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_39path_probability, METH_VARARGS|METH_KEYWORDS, 0},
  {"all_vulns", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_41all_vulns, METH_NOARGS, __pyx_doc_6harmat_6models_11attackgraph_11AttackGraph_40all_vulns},
  {"hosts", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_43hosts, METH_NOARGS, 0},
  {"num_vulnerable_hosts", (PyCFunction)__pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_45num_vulnerable_hosts, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6harmat_6models_11attackgraph_AttackGraph[] = {
  {(char *)"impact", __pyx_getprop_6harmat_6models_11attackgraph_11AttackGraph_impact, 0, (char *)0, 0},
  {(char *)"all_paths", __pyx_getprop_6harmat_6models_11attackgraph_11AttackGraph_all_paths, 0, (char *)0, 0},
  {(char *)"risk", __pyx_getprop_6harmat_6models_11attackgraph_11AttackGraph_risk, 0, (char *)"\n        Calculate the risk of this AttackGraph\n\n        The high level algorithm is as follows:\n            1. Find all possible paths from one node to another. However, we\n            ignore paths which contain loops.\n            2. Find the max of the risk of all paths.\n                i. To calculate the risk of a path, sum up the individual risk\n                values of all nodes in that path.\n        Args:\n            source: the source node. Usually should be the Attacker\n            target: the designated target node\n\n        Returns:\n            The total risk calculated.\n\n        ", 0},
  {(char *)"cost", __pyx_getprop_6harmat_6models_11attackgraph_11AttackGraph_cost, 0, (char *)"\n        Calculate the cost of this Attack Grpah\n\n        This is is minimum value of the path cost values of all attack paths\n        between a source node and target node\n\n        Args:\n            source: the originating node. Usually the attacker.\n\n            target: targetted node.\n        Returns:\n            The cost of an attack\n        ", 0},
  {(char *)"betweenness_centrality", __pyx_getprop_6harmat_6models_11attackgraph_11AttackGraph_betweenness_centrality, 0, (char *)"\n        Calculates the betweenness centrality\n        Returns:\n             A dictionary of nodes with values assigned to them\n        ", 0},
  {(char *)"closeness_centrality", __pyx_getprop_6harmat_6models_11attackgraph_11AttackGraph_closeness_centrality, 0, (char *)0, 0},
  {(char *)"degree_centrality", __pyx_getprop_6harmat_6models_11attackgraph_11AttackGraph_degree_centrality, 0, (char *)0, 0},
  {(char *)"source", __pyx_getprop_6harmat_6models_11attackgraph_11AttackGraph_source, __pyx_setprop_6harmat_6models_11attackgraph_11AttackGraph_source, (char *)0, 0},
  {(char *)"target", __pyx_getprop_6harmat_6models_11attackgraph_11AttackGraph_target, __pyx_setprop_6harmat_6models_11attackgraph_11AttackGraph_target, (char *)0, 0},
  {(char *)"values", __pyx_getprop_6harmat_6models_11attackgraph_11AttackGraph_values, __pyx_setprop_6harmat_6models_11attackgraph_11AttackGraph_values, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6harmat_6models_11attackgraph_AttackGraph = {
  PyVarObject_HEAD_INIT(0, 0)
  "harmat.models.attackgraph.AttackGraph", /*tp_name*/
  sizeof(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6harmat_6models_11attackgraph_AttackGraph, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_5__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    Attack Graph class.\n    An Attack graph is a way to model the security of a network.\n    This class inherits from networkx directed graph class so that we can use\n    all of its functions which are relevant\n    ", /*tp_doc*/
  __pyx_tp_traverse_6harmat_6models_11attackgraph_AttackGraph, /*tp_traverse*/
  __pyx_tp_clear_6harmat_6models_11attackgraph_AttackGraph, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6harmat_6models_11attackgraph_AttackGraph, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6harmat_6models_11attackgraph_AttackGraph, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6harmat_6models_11attackgraph_11AttackGraph_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6harmat_6models_11attackgraph_AttackGraph, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct____get__ *__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct____get__[8];
static int __pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct____get__ = 0;

static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct____get__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct____get__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct____get__)))) {
    o = (PyObject*)__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct____get__[--__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct____get__];
    memset(o, 0, sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct____get__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct____get__(PyObject *o) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct____get__ *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct____get__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct____get__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct____get__)))) {
    __pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct____get__[__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct____get__++] = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct____get__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct____get__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct____get__ *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct____get__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct____get__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct____get__ *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct____get__ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct____get__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "harmat.models.attackgraph.__pyx_scope_struct____get__", /*tp_name*/
  sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct____get__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct____get__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct____get__, /*tp_traverse*/
  __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct____get__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct____get__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr *__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr[--__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_path);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr[__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_path) {
    e = (*v)(p->__pyx_v_path, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct____get__ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_path);
  p->__pyx_v_path = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "harmat.models.attackgraph.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact *__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact[8];
static int __pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact = 0;

static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact)))) {
    o = (PyObject*)__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact[--__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact];
    memset(o, 0, sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact(PyObject *o) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_path);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact)))) {
    __pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact[__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact++] = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact *)o;
  if (p->__pyx_v_path) {
    e = (*v)(p->__pyx_v_path, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact *)o;
  tmp = ((PyObject*)p->__pyx_v_path);
  p->__pyx_v_path = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact = {
  PyVarObject_HEAD_INIT(0, 0)
  "harmat.models.attackgraph.__pyx_scope_struct_2_path_impact", /*tp_name*/
  sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact, /*tp_traverse*/
  __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr *__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr = 0;

static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr[--__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_node);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr)))) {
    __pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr[__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_node) {
    e = (*v)(p->__pyx_v_node, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_node);
  p->__pyx_v_node = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "harmat.models.attackgraph.__pyx_scope_struct_3_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack *__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack[8];
static int __pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack = 0;

static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack)))) {
    o = (PyObject*)__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack[--__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack];
    memset(o, 0, sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack(PyObject *o) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack)))) {
    __pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack[__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack++] = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack = {
  PyVarObject_HEAD_INIT(0, 0)
  "harmat.models.attackgraph.__pyx_scope_struct_4_return_on_attack", /*tp_name*/
  sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack, /*tp_traverse*/
  __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr *__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr[8];
static int __pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr = 0;

static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr[--__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr(PyObject *o) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_path);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr)))) {
    __pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr[__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr++] = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_path) {
    e = (*v)(p->__pyx_v_path, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_path);
  p->__pyx_v_path = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "harmat.models.attackgraph.__pyx_scope_struct_5_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr, /*tp_traverse*/
  __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length *__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length[8];
static int __pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length = 0;

static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length)))) {
    o = (PyObject*)__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length[--__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length];
    memset(o, 0, sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length(PyObject *o) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length)))) {
    __pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length[__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length++] = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length = {
  PyVarObject_HEAD_INIT(0, 0)
  "harmat.models.attackgraph.__pyx_scope_struct_6_mean_path_length", /*tp_name*/
  sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length, /*tp_traverse*/
  __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr *__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr[8];
static int __pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr = 0;

static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr[--__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr(PyObject *o) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_path);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr)))) {
    __pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr[__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr++] = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_path) {
    e = (*v)(p->__pyx_v_path, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_path);
  p->__pyx_v_path = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "harmat.models.attackgraph.__pyx_scope_struct_7_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr, /*tp_traverse*/
  __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length *__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length[8];
static int __pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length = 0;

static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length)))) {
    o = (PyObject*)__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length[--__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length];
    memset(o, 0, sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length(PyObject *o) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length)))) {
    __pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length[__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length++] = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length = {
  PyVarObject_HEAD_INIT(0, 0)
  "harmat.models.attackgraph.__pyx_scope_struct_8_mode_path_length", /*tp_name*/
  sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length, /*tp_traverse*/
  __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr *__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr[8];
static int __pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr = 0;

static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr[--__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr(PyObject *o) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_path);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr)))) {
    __pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr[__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr++] = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_path) {
    e = (*v)(p->__pyx_v_path, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_path);
  p->__pyx_v_path = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "harmat.models.attackgraph.__pyx_scope_struct_9_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr, /*tp_traverse*/
  __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length *__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length[8];
static int __pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length = 0;

static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length)))) {
    o = (PyObject*)__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length[--__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length];
    memset(o, 0, sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length(PyObject *o) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length)))) {
    __pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length[__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length++] = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length = {
  PyVarObject_HEAD_INIT(0, 0)
  "harmat.models.attackgraph.__pyx_scope_struct_10_stdev_path_length", /*tp_name*/
  sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length, /*tp_traverse*/
  __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr *__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr[8];
static int __pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr = 0;

static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr[--__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr(PyObject *o) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_path);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr)))) {
    __pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr[__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr++] = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_path) {
    e = (*v)(p->__pyx_v_path, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_path);
  p->__pyx_v_path = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "harmat.models.attackgraph.__pyx_scope_struct_11_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr, /*tp_traverse*/
  __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success *__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success[8];
static int __pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success = 0;

static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success)))) {
    o = (PyObject*)__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success[--__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success];
    memset(o, 0, sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success(PyObject *o) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success)))) {
    __pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success[__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success++] = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success = {
  PyVarObject_HEAD_INIT(0, 0)
  "harmat.models.attackgraph.__pyx_scope_struct_12_probability_attack_success", /*tp_name*/
  sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success, /*tp_traverse*/
  __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr *__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr[8];
static int __pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr = 0;

static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr[--__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr(PyObject *o) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_path);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr)))) {
    __pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr[__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr++] = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_path) {
    e = (*v)(p->__pyx_v_path, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_path);
  p->__pyx_v_path = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "harmat.models.attackgraph.__pyx_scope_struct_13_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr, /*tp_traverse*/
  __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns *__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns[8];
static int __pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns = 0;

static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns)))) {
    o = (PyObject*)__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns[--__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns];
    memset(o, 0, sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns(PyObject *o) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns)))) {
    __pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns[__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns++] = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns = {
  PyVarObject_HEAD_INIT(0, 0)
  "harmat.models.attackgraph.__pyx_scope_struct_14_all_vulns", /*tp_name*/
  sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns, /*tp_traverse*/
  __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr *__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr[8];
static int __pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr = 0;

static PyObject *__pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr[--__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr(PyObject *o) {
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_node);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr)))) {
    __pyx_freelist_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr[__pyx_freecount_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr++] = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_node) {
    e = (*v)(p->__pyx_v_node, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr *p = (struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_node);
  p->__pyx_v_node = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "harmat.models.attackgraph.__pyx_scope_struct_15_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr, /*tp_traverse*/
  __pyx_tp_clear_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "attackgraph",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_AttackGraph___get___locals_genex, __pyx_k_AttackGraph___get___locals_genex, sizeof(__pyx_k_AttackGraph___get___locals_genex), 0, 0, 1, 1},
  {&__pyx_kp_s_Attack_paths_have_not_been_calcu, __pyx_k_Attack_paths_have_not_been_calcu, sizeof(__pyx_k_Attack_paths_have_not_been_calcu), 0, 0, 1, 0},
  {&__pyx_n_s_Attacker, __pyx_k_Attacker, sizeof(__pyx_k_Attacker), 0, 0, 1, 1},
  {&__pyx_n_s_HarmNotFullyDefinedError, __pyx_k_HarmNotFullyDefinedError, sizeof(__pyx_k_HarmNotFullyDefinedError), 0, 0, 1, 1},
  {&__pyx_n_s_NoAttackPathExists, __pyx_k_NoAttackPathExists, sizeof(__pyx_k_NoAttackPathExists), 0, 0, 1, 1},
  {&__pyx_kp_s_No_attack_paths, __pyx_k_No_attack_paths, sizeof(__pyx_k_No_attack_paths), 0, 0, 1, 0},
  {&__pyx_n_s_Node, __pyx_k_Node, sizeof(__pyx_k_Node), 0, 0, 1, 1},
  {&__pyx_n_s_OrderedDict, __pyx_k_OrderedDict, sizeof(__pyx_k_OrderedDict), 0, 0, 1, 1},
  {&__pyx_kp_s_Source_is_not_set, __pyx_k_Source_is_not_set, sizeof(__pyx_k_Source_is_not_set), 0, 0, 1, 0},
  {&__pyx_kp_s_Users_hjkim_Desktop_misc_safeli, __pyx_k_Users_hjkim_Desktop_misc_safeli, sizeof(__pyx_k_Users_hjkim_Desktop_misc_safeli), 0, 0, 1, 0},
  {&__pyx_n_s_ZeroDivisionError, __pyx_k_ZeroDivisionError, sizeof(__pyx_k_ZeroDivisionError), 0, 0, 1, 1},
  {&__pyx_kp_s_Zero_cost_host_is_not_permitted, __pyx_k_Zero_cost_host_is_not_permitted, sizeof(__pyx_k_Zero_cost_host_is_not_permitted), 0, 0, 1, 0},
  {&__pyx_n_s_all_paths, __pyx_k_all_paths, sizeof(__pyx_k_all_paths), 0, 0, 1, 1},
  {&__pyx_n_s_all_vulns, __pyx_k_all_vulns, sizeof(__pyx_k_all_vulns), 0, 0, 1, 1},
  {&__pyx_n_s_all_vulns_locals_genexpr, __pyx_k_all_vulns_locals_genexpr, sizeof(__pyx_k_all_vulns_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_asset_value, __pyx_k_asset_value, sizeof(__pyx_k_asset_value), 0, 0, 1, 1},
  {&__pyx_n_s_betweenness_centrality, __pyx_k_betweenness_centrality, sizeof(__pyx_k_betweenness_centrality), 0, 0, 1, 1},
  {&__pyx_n_s_centrality, __pyx_k_centrality, sizeof(__pyx_k_centrality), 0, 0, 1, 1},
  {&__pyx_n_s_check_attack_paths, __pyx_k_check_attack_paths, sizeof(__pyx_k_check_attack_paths), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_closeness_centrality, __pyx_k_closeness_centrality, sizeof(__pyx_k_closeness_centrality), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_cost, __pyx_k_cost, sizeof(__pyx_k_cost), 0, 0, 1, 1},
  {&__pyx_n_s_degree_centrality, __pyx_k_degree_centrality, sizeof(__pyx_k_degree_centrality), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_filter, __pyx_k_filter, sizeof(__pyx_k_filter), 0, 0, 1, 1},
  {&__pyx_n_s_filter_ignorables, __pyx_k_filter_ignorables, sizeof(__pyx_k_filter_ignorables), 0, 0, 1, 1},
  {&__pyx_n_s_find_paths, __pyx_k_find_paths, sizeof(__pyx_k_find_paths), 0, 0, 1, 1},
  {&__pyx_n_s_flowup, __pyx_k_flowup, sizeof(__pyx_k_flowup), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_harmat, __pyx_k_harmat, sizeof(__pyx_k_harmat), 0, 0, 1, 1},
  {&__pyx_n_s_harmat_models_attackgraph, __pyx_k_harmat_models_attackgraph, sizeof(__pyx_k_harmat_models_attackgraph), 0, 0, 1, 1},
  {&__pyx_n_s_hm, __pyx_k_hm, sizeof(__pyx_k_hm), 0, 0, 1, 1},
  {&__pyx_n_s_host, __pyx_k_host, sizeof(__pyx_k_host), 0, 0, 1, 1},
  {&__pyx_n_s_hosts, __pyx_k_hosts, sizeof(__pyx_k_hosts), 0, 0, 1, 1},
  {&__pyx_n_s_hosts_locals_lambda, __pyx_k_hosts_locals_lambda, sizeof(__pyx_k_hosts_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_ignorable, __pyx_k_ignorable, sizeof(__pyx_k_ignorable), 0, 0, 1, 1},
  {&__pyx_n_s_impact, __pyx_k_impact, sizeof(__pyx_k_impact), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_lower_layer, __pyx_k_lower_layer, sizeof(__pyx_k_lower_layer), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_mean, __pyx_k_mean, sizeof(__pyx_k_mean), 0, 0, 1, 1},
  {&__pyx_n_s_mean_path_length, __pyx_k_mean_path_length, sizeof(__pyx_k_mean_path_length), 0, 0, 1, 1},
  {&__pyx_n_s_mean_path_length_locals_genexpr, __pyx_k_mean_path_length_locals_genexpr, sizeof(__pyx_k_mean_path_length_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_mode_path_length_locals_genexpr, __pyx_k_mode_path_length_locals_genexpr, sizeof(__pyx_k_mode_path_length_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_networkx, __pyx_k_networkx, sizeof(__pyx_k_networkx), 0, 0, 1, 1},
  {&__pyx_n_s_node, __pyx_k_node, sizeof(__pyx_k_node), 0, 0, 1, 1},
  {&__pyx_n_s_node1, __pyx_k_node1, sizeof(__pyx_k_node1), 0, 0, 1, 1},
  {&__pyx_n_s_nodes, __pyx_k_nodes, sizeof(__pyx_k_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_number_of_attack_paths, __pyx_k_number_of_attack_paths, sizeof(__pyx_k_number_of_attack_paths), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_path_impact, __pyx_k_path_impact, sizeof(__pyx_k_path_impact), 0, 0, 1, 1},
  {&__pyx_n_s_path_impact_locals_genexpr, __pyx_k_path_impact_locals_genexpr, sizeof(__pyx_k_path_impact_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_path_probability, __pyx_k_path_probability, sizeof(__pyx_k_path_probability), 0, 0, 1, 1},
  {&__pyx_n_s_path_return, __pyx_k_path_return, sizeof(__pyx_k_path_return), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_prob, __pyx_k_prob, sizeof(__pyx_k_prob), 0, 0, 1, 1},
  {&__pyx_n_s_probability, __pyx_k_probability, sizeof(__pyx_k_probability), 0, 0, 1, 1},
  {&__pyx_n_s_probability_attack_success_local, __pyx_k_probability_attack_success_local, sizeof(__pyx_k_probability_attack_success_local), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_return_on_attack_locals_genexpr, __pyx_k_return_on_attack_locals_genexpr, sizeof(__pyx_k_return_on_attack_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_risk, __pyx_k_risk, sizeof(__pyx_k_risk), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_shortest_path, __pyx_k_shortest_path, sizeof(__pyx_k_shortest_path), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_statistics, __pyx_k_statistics, sizeof(__pyx_k_statistics), 0, 0, 1, 1},
  {&__pyx_n_s_stdev, __pyx_k_stdev, sizeof(__pyx_k_stdev), 0, 0, 1, 1},
  {&__pyx_n_s_stdev_path_length_locals_genexpr, __pyx_k_stdev_path_length_locals_genexpr, sizeof(__pyx_k_stdev_path_length_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_two_ways, __pyx_k_two_ways, sizeof(__pyx_k_two_ways), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 83, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 46, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(0, 81, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 85, __pyx_L1_error)
  __pyx_builtin_ZeroDivisionError = __Pyx_GetBuiltinName(__pyx_n_s_ZeroDivisionError); if (!__pyx_builtin_ZeroDivisionError) __PYX_ERR(0, 349, __pyx_L1_error)
  __pyx_builtin_filter = __Pyx_GetBuiltinName(__pyx_n_s_filter); if (!__pyx_builtin_filter) __PYX_ERR(0, 374, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "harmat/models/attackgraph.pyx":61
 *         cdef vector[NodeProperty*] nodes
 *         if self.source is None:
 *             raise HarmNotFullyDefinedError('Source is not set')             # <<<<<<<<<<<<<<
 *         if self.target is None:
 *             nodes = deref(self.graph_ptr).nodes()
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Source_is_not_set); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "harmat/models/attackgraph.pyx":85
 *     @staticmethod
 *     def path_impact(path):
 *         return sum(node.impact for node in path[1:])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_slice__2 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__2)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__2);
  __Pyx_GIVEREF(__pyx_slice__2);

  /* "harmat/models/attackgraph.pyx":233
 *         """
 *         path_return = 0
 *         for node in path[1:]:             # <<<<<<<<<<<<<<
 *             if node.cost == 0:
 *                 raise Exception('Zero cost host is not permitted')
 */
  __pyx_slice__3 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__3)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__3);
  __Pyx_GIVEREF(__pyx_slice__3);

  /* "harmat/models/attackgraph.pyx":235
 *         for node in path[1:]:
 *             if node.cost == 0:
 *                 raise Exception('Zero cost host is not permitted')             # <<<<<<<<<<<<<<
 *             path_return += node.risk / node.cost
 *         return path_return
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_Zero_cost_host_is_not_permitted); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "harmat/models/attackgraph.pyx":343
 *     def number_of_attack_paths(self):
 *         if self.all_paths is None:
 *             raise Exception('Attack paths have not been calculated')             # <<<<<<<<<<<<<<
 *         return self.cy_all_paths.size()
 * 
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_Attack_paths_have_not_been_calcu); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "harmat/models/attackgraph.pyx":349
 *         num_paths = self.number_of_attack_paths()
 *         if num_paths == 0:
 *             raise ZeroDivisionError('No attack paths')             # <<<<<<<<<<<<<<
 *         return self.mean_path_length() / num_paths
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_No_attack_paths); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "harmat/models/attackgraph.pyx":354
 *     def probability_attack_success(self):
 *         self.check_attack_paths()
 *         return max(self.path_probability(path[1:]) for path in self.all_paths)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_slice__7 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__7)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__7);
  __Pyx_GIVEREF(__pyx_slice__7);

  /* "harmat/models/attackgraph.pyx":360
 *         # return reduce(lambda x, y: x * y, (host.lower_layer.values['probability'] for host in path[1:]))
 *         p = 1
 *         for host in path[1:]:             # <<<<<<<<<<<<<<
 *             prob = host.probability
 *             if prob == 0:
 */
  __pyx_slice__8 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__8)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__8);
  __Pyx_GIVEREF(__pyx_slice__8);

  /* "harmat/models/attackgraph.pyx":84
 * 
 *     @staticmethod
 *     def path_impact(path):             # <<<<<<<<<<<<<<
 *         return sum(node.impact for node in path[1:])
 * 
 */
  __pyx_tuple__9 = PyTuple_Pack(3, __pyx_n_s_path, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_hjkim_Desktop_misc_safeli, __pyx_n_s_path_impact, 84, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(0, 84, __pyx_L1_error)

  /* "harmat/models/attackgraph.pyx":228
 * 
 *     @staticmethod
 *     def path_return(path):             # <<<<<<<<<<<<<<
 *         """
 *         probability, impact and cost attributes must be set for all nodes
 */
  __pyx_tuple__11 = PyTuple_Pack(3, __pyx_n_s_path, __pyx_n_s_path_return, __pyx_n_s_node); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_hjkim_Desktop_misc_safeli, __pyx_n_s_path_return, 228, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 228, __pyx_L1_error)

  /* "harmat/models/attackgraph.pyx":357
 * 
 *     @staticmethod
 *     def path_probability(path):             # <<<<<<<<<<<<<<
 *         # return reduce(lambda x, y: x * y, (host.lower_layer.values['probability'] for host in path[1:]))
 *         p = 1
 */
  __pyx_tuple__13 = PyTuple_Pack(4, __pyx_n_s_path, __pyx_n_s_p, __pyx_n_s_host, __pyx_n_s_prob); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_hjkim_Desktop_misc_safeli, __pyx_n_s_path_probability, 357, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 357, __pyx_L1_error)

  /* "harmat/models/attackgraph.pyx":380
 * 
 * 
 * def filter_ignorables(path):             # <<<<<<<<<<<<<<
 *     return [node for node in path if node.ignorable is False]
 * 
 */
  __pyx_tuple__15 = PyTuple_Pack(2, __pyx_n_s_path, __pyx_n_s_node); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_hjkim_Desktop_misc_safeli, __pyx_n_s_filter_ignorables, 380, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  /* InitThreads.init */
  #ifdef WITH_THREAD
PyEval_InitThreads();
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initattackgraph(void); /*proto*/
PyMODINIT_FUNC initattackgraph(void)
#else
PyMODINIT_FUNC PyInit_attackgraph(void); /*proto*/
PyMODINIT_FUNC PyInit_attackgraph(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_attackgraph(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("attackgraph", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_harmat__models__attackgraph) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "harmat.models.attackgraph")) {
      if (unlikely(PyDict_SetItemString(modules, "harmat.models.attackgraph", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_ptype_6harmat_5graph_HarmatGraph = __Pyx_ImportType("harmat.graph", "HarmatGraph", sizeof(struct __pyx_obj_6harmat_5graph_HarmatGraph), 1); if (unlikely(!__pyx_ptype_6harmat_5graph_HarmatGraph)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_6harmat_5graph_HarmatGraph = (struct __pyx_vtabstruct_6harmat_5graph_HarmatGraph*)__Pyx_GetVtable(__pyx_ptype_6harmat_5graph_HarmatGraph->tp_dict); if (unlikely(!__pyx_vtabptr_6harmat_5graph_HarmatGraph)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_6harmat_6models_11attackgraph_AttackGraph = &__pyx_vtable_6harmat_6models_11attackgraph_AttackGraph;
  __pyx_vtable_6harmat_6models_11attackgraph_AttackGraph.__pyx_base = *__pyx_vtabptr_6harmat_5graph_HarmatGraph;
  __pyx_vtable_6harmat_6models_11attackgraph_AttackGraph.path_risk = (PyObject *(*)(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *, std::vector<struct __pyx_t_6harmat_5graph_NodeProperty *> ))__pyx_f_6harmat_6models_11attackgraph_11AttackGraph_path_risk;
  __pyx_vtable_6harmat_6models_11attackgraph_AttackGraph.path_cost = (PyObject *(*)(struct __pyx_obj_6harmat_6models_11attackgraph_AttackGraph *, std::vector<struct __pyx_t_6harmat_5graph_NodeProperty *> ))__pyx_f_6harmat_6models_11attackgraph_11AttackGraph_path_cost;
  __pyx_type_6harmat_6models_11attackgraph_AttackGraph.tp_base = __pyx_ptype_6harmat_5graph_HarmatGraph;
  if (PyType_Ready(&__pyx_type_6harmat_6models_11attackgraph_AttackGraph) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __pyx_type_6harmat_6models_11attackgraph_AttackGraph.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6harmat_6models_11attackgraph_AttackGraph.tp_dict, __pyx_vtabptr_6harmat_6models_11attackgraph_AttackGraph) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "AttackGraph", (PyObject *)&__pyx_type_6harmat_6models_11attackgraph_AttackGraph) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __pyx_ptype_6harmat_6models_11attackgraph_AttackGraph = &__pyx_type_6harmat_6models_11attackgraph_AttackGraph;
  if (PyType_Ready(&__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct____get__) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
  __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct____get__.tp_print = 0;
  __pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct____get__ = &__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct____get__;
  if (PyType_Ready(&__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 81, __pyx_L1_error)
  __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr.tp_print = 0;
  __pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr = &__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_1_genexpr;
  if (PyType_Ready(&__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact) < 0) __PYX_ERR(0, 84, __pyx_L1_error)
  __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact.tp_print = 0;
  __pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact = &__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_2_path_impact;
  if (PyType_Ready(&__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr.tp_print = 0;
  __pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr = &__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_3_genexpr;
  if (PyType_Ready(&__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack) < 0) __PYX_ERR(0, 213, __pyx_L1_error)
  __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack.tp_print = 0;
  __pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack = &__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_4_return_on_attack;
  if (PyType_Ready(&__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr) < 0) __PYX_ERR(0, 225, __pyx_L1_error)
  __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr.tp_print = 0;
  __pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr = &__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_5_genexpr;
  if (PyType_Ready(&__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length) < 0) __PYX_ERR(0, 239, __pyx_L1_error)
  __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length.tp_print = 0;
  __pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length = &__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_6_mean_path_length;
  if (PyType_Ready(&__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr.tp_print = 0;
  __pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr = &__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_7_genexpr;
  if (PyType_Ready(&__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length) < 0) __PYX_ERR(0, 252, __pyx_L1_error)
  __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length.tp_print = 0;
  __pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length = &__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_8_mode_path_length;
  if (PyType_Ready(&__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr) < 0) __PYX_ERR(0, 257, __pyx_L1_error)
  __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr.tp_print = 0;
  __pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr = &__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_9_genexpr;
  if (PyType_Ready(&__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length) < 0) __PYX_ERR(0, 259, __pyx_L1_error)
  __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length.tp_print = 0;
  __pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length = &__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_10_stdev_path_length;
  if (PyType_Ready(&__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr) < 0) __PYX_ERR(0, 264, __pyx_L1_error)
  __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr.tp_print = 0;
  __pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr = &__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_11_genexpr;
  if (PyType_Ready(&__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success) < 0) __PYX_ERR(0, 352, __pyx_L1_error)
  __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success.tp_print = 0;
  __pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success = &__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_12_probability_attack_success;
  if (PyType_Ready(&__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr) < 0) __PYX_ERR(0, 354, __pyx_L1_error)
  __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr.tp_print = 0;
  __pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr = &__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_13_genexpr;
  if (PyType_Ready(&__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns) < 0) __PYX_ERR(0, 367, __pyx_L1_error)
  __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns.tp_print = 0;
  __pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns = &__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_14_all_vulns;
  if (PyType_Ready(&__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr) < 0) __PYX_ERR(0, 371, __pyx_L1_error)
  __pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr.tp_print = 0;
  __pyx_ptype_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr = &__pyx_type_6harmat_6models_11attackgraph___pyx_scope_struct_15_genexpr;
  /*--- Type import code ---*/
  __pyx_ptype_6harmat_5graph_Node = __Pyx_ImportType("harmat.graph", "Node", sizeof(struct __pyx_obj_6harmat_5graph_Node), 1); if (unlikely(!__pyx_ptype_6harmat_5graph_Node)) __PYX_ERR(1, 44, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "harmat/models/attackgraph.pyx":1
 * import networkx             # <<<<<<<<<<<<<<
 * from collections import OrderedDict
 * import statistics
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_networkx, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_networkx, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "harmat/models/attackgraph.pyx":2
 * import networkx
 * from collections import OrderedDict             # <<<<<<<<<<<<<<
 * import statistics
 * import harmat as hm
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_OrderedDict);
  __Pyx_GIVEREF(__pyx_n_s_OrderedDict);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_OrderedDict);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderedDict, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "harmat/models/attackgraph.pyx":3
 * import networkx
 * from collections import OrderedDict
 * import statistics             # <<<<<<<<<<<<<<
 * import harmat as hm
 * from libcpp.vector cimport vector
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_statistics, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_statistics, __pyx_t_2) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "harmat/models/attackgraph.pyx":4
 * from collections import OrderedDict
 * import statistics
 * import harmat as hm             # <<<<<<<<<<<<<<
 * from libcpp.vector cimport vector
 * from libcpp.pair cimport pair
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_harmat, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_hm, __pyx_t_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "harmat/models/attackgraph.pyx":20
 * 
 * 
 * class HarmNotFullyDefinedError(Exception): pass             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __Pyx_GIVEREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_HarmNotFullyDefinedError, __pyx_n_s_HarmNotFullyDefinedError, (PyObject *) NULL, __pyx_n_s_harmat_models_attackgraph, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_HarmNotFullyDefinedError, __pyx_t_2, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HarmNotFullyDefinedError, __pyx_t_4) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "harmat/models/attackgraph.pyx":23
 * 
 * 
 * class NoAttackPathExists(Exception): pass             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __Pyx_GIVEREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_NoAttackPathExists, __pyx_n_s_NoAttackPathExists, (PyObject *) NULL, __pyx_n_s_harmat_models_attackgraph, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_NoAttackPathExists, __pyx_t_2, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NoAttackPathExists, __pyx_t_4) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "harmat/models/attackgraph.pyx":84
 * 
 *     @staticmethod
 *     def path_impact(path):             # <<<<<<<<<<<<<<
 *         return sum(node.impact for node in path[1:])
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6harmat_6models_11attackgraph_11AttackGraph_11path_impact, NULL, __pyx_n_s_harmat_models_attackgraph); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "harmat/models/attackgraph.pyx":83
 *         return max(self.path_impact(path) for path in self.all_paths)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def path_impact(path):
 *         return sum(node.impact for node in path[1:])
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6harmat_6models_11attackgraph_AttackGraph->tp_dict, __pyx_n_s_path_impact, __pyx_t_2) < 0) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6harmat_6models_11attackgraph_AttackGraph);

  /* "harmat/models/attackgraph.pyx":84
 * 
 *     @staticmethod
 *     def path_impact(path):             # <<<<<<<<<<<<<<
 *         return sum(node.impact for node in path[1:])
 * 
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6harmat_6models_11attackgraph_AttackGraph, __pyx_n_s_path_impact); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "harmat/models/attackgraph.pyx":83
 *         return max(self.path_impact(path) for path in self.all_paths)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def path_impact(path):
 *         return sum(node.impact for node in path[1:])
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6harmat_6models_11attackgraph_AttackGraph->tp_dict, __pyx_n_s_path_impact, __pyx_t_2) < 0) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6harmat_6models_11attackgraph_AttackGraph);

  /* "harmat/models/attackgraph.pyx":228
 * 
 *     @staticmethod
 *     def path_return(path):             # <<<<<<<<<<<<<<
 *         """
 *         probability, impact and cost attributes must be set for all nodes
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6harmat_6models_11attackgraph_11AttackGraph_17path_return, NULL, __pyx_n_s_harmat_models_attackgraph); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "harmat/models/attackgraph.pyx":227
 *         return max(self.path_return(path) for path in self.all_paths)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def path_return(path):
 *         """
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6harmat_6models_11attackgraph_AttackGraph->tp_dict, __pyx_n_s_path_return, __pyx_t_2) < 0) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6harmat_6models_11attackgraph_AttackGraph);

  /* "harmat/models/attackgraph.pyx":228
 * 
 *     @staticmethod
 *     def path_return(path):             # <<<<<<<<<<<<<<
 *         """
 *         probability, impact and cost attributes must be set for all nodes
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6harmat_6models_11attackgraph_AttackGraph, __pyx_n_s_path_return); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "harmat/models/attackgraph.pyx":227
 *         return max(self.path_return(path) for path in self.all_paths)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def path_return(path):
 *         """
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6harmat_6models_11attackgraph_AttackGraph->tp_dict, __pyx_n_s_path_return, __pyx_t_2) < 0) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6harmat_6models_11attackgraph_AttackGraph);

  /* "harmat/models/attackgraph.pyx":357
 * 
 *     @staticmethod
 *     def path_probability(path):             # <<<<<<<<<<<<<<
 *         # return reduce(lambda x, y: x * y, (host.lower_layer.values['probability'] for host in path[1:]))
 *         p = 1
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6harmat_6models_11attackgraph_11AttackGraph_39path_probability, NULL, __pyx_n_s_harmat_models_attackgraph); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "harmat/models/attackgraph.pyx":356
 *         return max(self.path_probability(path[1:]) for path in self.all_paths)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def path_probability(path):
 *         # return reduce(lambda x, y: x * y, (host.lower_layer.values['probability'] for host in path[1:]))
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6harmat_6models_11attackgraph_AttackGraph->tp_dict, __pyx_n_s_path_probability, __pyx_t_2) < 0) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6harmat_6models_11attackgraph_AttackGraph);

  /* "harmat/models/attackgraph.pyx":357
 * 
 *     @staticmethod
 *     def path_probability(path):             # <<<<<<<<<<<<<<
 *         # return reduce(lambda x, y: x * y, (host.lower_layer.values['probability'] for host in path[1:]))
 *         p = 1
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6harmat_6models_11attackgraph_AttackGraph, __pyx_n_s_path_probability); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "harmat/models/attackgraph.pyx":356
 *         return max(self.path_probability(path[1:]) for path in self.all_paths)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def path_probability(path):
 *         # return reduce(lambda x, y: x * y, (host.lower_layer.values['probability'] for host in path[1:]))
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6harmat_6models_11attackgraph_AttackGraph->tp_dict, __pyx_n_s_path_probability, __pyx_t_2) < 0) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6harmat_6models_11attackgraph_AttackGraph);

  /* "harmat/models/attackgraph.pyx":380
 * 
 * 
 * def filter_ignorables(path):             # <<<<<<<<<<<<<<
 *     return [node for node in path if node.ignorable is False]
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6harmat_6models_11attackgraph_1filter_ignorables, NULL, __pyx_n_s_harmat_models_attackgraph); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_filter_ignorables, __pyx_t_2) < 0) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "harmat/models/attackgraph.pyx":406
 *     return all_paths
 * 
 * import time             # <<<<<<<<<<<<<<
 * 
 * ctypedef vector[Nptr].iterator vit
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_time, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_2) < 0) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "harmat/models/attackgraph.pyx":1
 * import networkx             # <<<<<<<<<<<<<<
 * from collections import OrderedDict
 * import statistics
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init harmat.models.attackgraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init harmat.models.attackgraph");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyObjectCall */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyErrFetchRestore */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
      #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* None */
        static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* RaiseDoubleKeywords */
        static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
        static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* SliceObject */
        static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* PyIntBinop */
        #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* PyIntBinop */
        #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* SaveResetException */
        #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
        #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* ExtTypeTest */
          static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* FetchCommonType */
          static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
          static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* WriteUnraisableException */
              static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* CallNextTpDealloc */
              static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* CallNextTpTraverse */
              static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
              static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* GetVTable */
              static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* SetVTable */
              static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* Import */
              static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
              static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CalculateMetaclass */
              static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
              static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* GetNameInClass */
              static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result)
        result = __Pyx_GetModuleGlobalName(name);
    return result;
}

/* CodeObjectCache */
              static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
              #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static PyObject* __pyx_convert__to_py_struct____pyx_t_6harmat_5graph_NodeProperty(struct __pyx_t_6harmat_5graph_NodeProperty s) {
                PyObject* res;
                PyObject* member;
                res = PyDict_New(); if (unlikely(!res)) return NULL;
                member = PyFloat_FromDouble(s.risk); if (unlikely(!member)) goto bad;
                if (unlikely(PyDict_SetItem(res, __pyx_n_s_risk, member) < 0)) goto bad;
                Py_DECREF(member);
                member = PyFloat_FromDouble(s.cost); if (unlikely(!member)) goto bad;
                if (unlikely(PyDict_SetItem(res, __pyx_n_s_cost, member) < 0)) goto bad;
                Py_DECREF(member);
                member = PyFloat_FromDouble(s.impact); if (unlikely(!member)) goto bad;
                if (unlikely(PyDict_SetItem(res, __pyx_n_s_impact, member) < 0)) goto bad;
                Py_DECREF(member);
                member = PyFloat_FromDouble(s.probability); if (unlikely(!member)) goto bad;
                if (unlikely(PyDict_SetItem(res, __pyx_n_s_probability, member) < 0)) goto bad;
                Py_DECREF(member);
                member = PyFloat_FromDouble(s.asset_value); if (unlikely(!member)) goto bad;
                if (unlikely(PyDict_SetItem(res, __pyx_n_s_asset_value, member) < 0)) goto bad;
                Py_DECREF(member);
                member = __Pyx_PyBool_FromLong(s.ignorable); if (unlikely(!member)) goto bad;
                if (unlikely(PyDict_SetItem(res, __pyx_n_s_ignorable, member) < 0)) goto bad;
                Py_DECREF(member);
                return res;
                bad:
                Py_XDECREF(member);
                Py_DECREF(res);
                return NULL;
              }
              /* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
              #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
              static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
              static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* SwapException */
              #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectCallMethod1 */
              static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* CoroutineBase */
              #include <structmember.h>
#include <frameobject.h>
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Coroutine_CheckRunning(__pyx_CoroutineObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value) {
    PyObject *retval;
    __Pyx_PyThreadState_declare
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    __Pyx_PyThreadState_assign
    if (value) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(__pyx_tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = __pyx_tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject *retval) {
    if (unlikely(!retval && !PyErr_Occurred())) {
        PyErr_SetNone(PyExc_StopIteration);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Coroutine_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value);
    }
    return __Pyx_Coroutine_MethodReturn(retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
            goto throw_here;
        }
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
}
static int __Pyx_Coroutine_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label > 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label <= 0)
        return ;
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Coroutine_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
                  static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
                  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (!abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_VERSION_HEX >= 0x03030000) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_VERSION_HEX >= 0x03030000) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if (0) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
                  static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if PY_VERSION_HEX >= 0x030400a1
    __Pyx_Coroutine_del,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
                  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
                  #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
                  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
                  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
